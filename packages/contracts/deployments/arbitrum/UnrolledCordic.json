{
  "address": "0x3F8FdcD1B0F421D817BF58C96b7C91B98100B450",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        }
      ],
      "name": "log2Times1e18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xcf923d2ca254cd2e061d2566ad7f1e1e25d6bb7c9e5f0311681629033fcf7f42",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0x0e28A8f88C6266dF0FE274c15c1d4b27f8B373C0",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "6927658",
    "logsBloom": "0x
    "blockHash": "0x3c39e1392b12e8e2dc7cf325c8759cda904e37ecfbcbfe32c87869d4ede69ab1",
    "transactionHash": "0xcf923d2ca254cd2e061d2566ad7f1e1e25d6bb7c9e5f0311681629033fcf7f42",
    "logs": [],
    "blockNumber": 114520512,
    "cumulativeGasUsed": "6927658",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "18c7b3fb984a9ee861b83d1058d152f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log2Times1e18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UnrolledCordic.sol\":\"UnrolledCordic\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/UnrolledCordic.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n///@title UnrolledCordic.sol\\n///@author Gabriel Barros, Diego Nehab\\npragma solidity ^0.8.0;\\n\\nlibrary UnrolledCordic {\\n    uint256 constant one = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 constant log2_e = 0xb8aa3b295c17f0bbbe87fed0691d3e88eb577aa8dd695a588b25166cd1a13248;\\n\\n    uint64 constant N = 64;\\n    uint256 constant log2_ks0 = 0xb31fb7d64898b3e15c01a39fbd687a02934f0979a3715fd4ae00d1cfdeb43d0;\\n    uint256 constant log2_ks1 = 0xb84e236bd563ba016fe50b6ef0851802dcf2d0b85a453105aeb4dd63bf61cc;\\n    uint256 constant log2_ks2 = 0xb8a476150dfe4001713d62f7957c3002e24ca6e87e8a8005c3e0ffc29d593;\\n    uint256 constant log2_ks3 = 0xb8a9ded47c110001715305002e4b0002e2a32762fa6c0005c53ac47e94d9;\\n    uint256 constant log2_ks4 = 0xb8aa35640a80000171545f3d72b00002e2a8905062300005c55067f6e59;\\n    uint256 constant log2_ks5 = 0xb8aa3acd07000001715474e164000002e2a8e6e01f000005c551c2359a;\\n\\n    function log2m64(uint256 x) internal pure returns (uint256) {\\n        uint256 y = 0;\\n        uint256 t;\\n\\n        unchecked {\\n            // round(log_2(1+1/2^i)*2^64) for i = 1..4 packed into 64bits each\\n            t = x + (x >> 1);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks0 << 192;\\n            }\\n            t = x + (x >> 2);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks0 >> 64) << 192;\\n            }\\n            t = x + (x >> 3);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks0 >> 128) << 192;\\n            }\\n            t = x + (x >> 4);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks0 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 5..8 packed into 64bits each\\n            t = x + (x >> 5);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks1 << 192;\\n            }\\n            t = x + (x >> 6);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks1 >> 64) << 192;\\n            }\\n            t = x + (x >> 7);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks1 >> 128) << 192;\\n            }\\n            t = x + (x >> 8);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks1 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 9..12 packed into 64bits each\\n            t = x + (x >> 9);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks2 << 192;\\n            }\\n            t = x + (x >> 10);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks2 >> 64) << 192;\\n            }\\n            t = x + (x >> 11);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks2 >> 128) << 192;\\n            }\\n            t = x + (x >> 12);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks2 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 13..16 packed into 64bits each\\n            t = x + (x >> 13);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks3 << 192;\\n            }\\n            t = x + (x >> 14);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks3 >> 64) << 192;\\n            }\\n            t = x + (x >> 15);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks3 >> 128) << 192;\\n            }\\n            t = x + (x >> 16);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks3 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 17..20 packed into 64bits each\\n            t = x + (x >> 17);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks4 << 192;\\n            }\\n            t = x + (x >> 18);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks4 >> 64) << 192;\\n            }\\n            t = x + (x >> 19);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks4 >> 128) << 192;\\n            }\\n            t = x + (x >> 20);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks4 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 21..24 packed into 64bits each\\n            t = x + (x >> 21);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks5 << 192;\\n            }\\n            t = x + (x >> 22);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks5 >> 64) << 192;\\n            }\\n            t = x + (x >> 23);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks5 >> 128) << 192;\\n            }\\n            t = x + (x >> 24);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks5 >> 192) << 192;\\n            }\\n\\n            uint256 r = one - x;\\n            y += mulhi128(log2_e, mulhi128(r, one + (r >> 1)) << 1) << 1;\\n            return y >> (255 - 64);\\n        }\\n    }\\n\\n    function log2Times1e18(uint256 val) external pure returns (uint256) {\\n        int256 il = ilog2(val);\\n        uint256 skewedRes;\\n        unchecked {\\n            if (il + 1 <= 255) {\\n                skewedRes = (uint256(il + 1) << N) - log2m64(val << (255 - uint256(il + 1)));\\n            } else {\\n                skewedRes = (uint256(il + 1) << N) - log2m64(val >> uint256((il + 1) - 255));\\n            }\\n            return (skewedRes * 1e18) >> N;\\n        }\\n    }\\n\\n    function mulhi128(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            return (a >> 128) * (b >> 128);\\n        }\\n    }\\n\\n    function ilog2(uint256 val) internal pure returns (int256) {\\n        require(val > 0, \\\"must be greater than zero\\\");\\n        unchecked {\\n            return 255 - int256(clz(val));\\n        }\\n    }\\n\\n    /// @notice count leading zeros\\n    /// @param _num number you want the clz of\\n    /// @dev this a binary search implementation\\n    function clz(uint256 _num) internal pure returns (uint256) {\\n        if (_num == 0) return 256;\\n        unchecked {\\n            uint256 n = 0;\\n            if (_num & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 == 0) {\\n                n = n + 128;\\n                _num = _num << 128;\\n            }\\n            if (_num & 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 64;\\n                _num = _num << 64;\\n            }\\n            if (_num & 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 32;\\n                _num = _num << 32;\\n            }\\n            if (_num & 0xFFFF000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 16;\\n                _num = _num << 16;\\n            }\\n            if (_num & 0xFF00000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 8;\\n                _num = _num << 8;\\n            }\\n            if (_num & 0xF000000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 4;\\n                _num = _num << 4;\\n            }\\n            if (_num & 0xC000000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 2;\\n                _num = _num << 2;\\n            }\\n            if (_num & 0x8000000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 1;\\n            }\\n\\n            return n;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2b492b6b11ab8bb42017a1c35fd6215e0ecea5305c070bb189a4426fc56821b3\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x61062c61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063c370ed091461003a575b600080fd5b61004d6100483660046105dd565b61005f565b60405190815260200160405180910390f35b60008061006b836100ca565b9050600060ff826001011361009b5761008c8260010160ff0385901b610131565b6001830160401b0390506100b6565b6100ab60fd19830185901c610131565b6001830160401b0390505b670de0b6b3a76400000260401c9392505050565b600080821161011f5760405162461bcd60e51b815260206004820152601960248201527f6d7573742062652067726561746572207468616e207a65726f00000000000000604482015260640160405180910390fd5b610128826104f9565b60ff0392915050565b600080600183901c8301600160ff1b8110156101585792506704ae00d1cfdeb43d60c41b01825b50600283901c8301600160ff1b81101561017d579250672934f0979a3715fd60c01b01825b50600383901c8301600160ff1b8110156101a157925066ae00d1cfdeb43d60c51b01825b50600483901c8301600160ff1b8110156101c6579250670598fdbeb244c59f60c11b01825b50600583901c8301600160ff1b8110156101eb57925067016bad3758efd87360c21b01825b50600683901c8301600160ff1b8110156102105792506702dcf2d0b85a453160c01b01825b50600783901c8301600160ff1b811015610234579250662dfca16dde10a360c31b01825b50600883901c8301600160ff1b811015610258579250665c2711b5eab1dd60c11b01825b50600983901c8301600160ff1b81101561027c579250665c3e0ffc29d59360c01b01825b50600a83901c8301600160ff1b8110156102a05792506605c4994dd0fd1560c31b01825b50600b83901c8301600160ff1b8110156102c4579250661713d62f7957c360c01b01825b50600c83901c8301600160ff1b8110156102e85792506602e291d85437f960c21b01825b50600d83901c8301600160ff1b81101561030c5792506605c53ac47e94d960c01b01825b50600e83901c8301600160ff1b81101561032f57925065b8a8c9d8be9b60c21b01825b50600f83901c8301600160ff1b8110156103535792506601715305002e4b60c01b01825b50601083901c8301600160ff1b81101561037657925065b8a9ded47c1160c01b01825b50601183901c8301600160ff1b811015610399579250655c55067f6e5960c01b01825b50601283901c8301600160ff1b8110156103bc579250652e2a8905062360c01b01825b50601383901c8301600160ff1b8110156103df57925065171545f3d72b60c01b01825b50601483901c8301600160ff1b811015610402579250650171546ac81560c31b01825b50601583901c8301600160ff1b8110156104255792506502e2a8e11acd60c11b01825b50601683901c8301600160ff1b8110156104485792506502e2a8e6e01f60c01b01825b50601783901c8301600160ff1b81101561046a579250645c551d385960c21b01825b50601883901c8301600160ff1b81101561048c57925064b8aa3acd0760c01b01825b600084600160ff1b03905060016104e87fb8aa3b295c17f0bbbe87fed0691d3e88eb577aa8dd695a588b25166cd1a1324860016104da85600187901c600160ff1b01608090811c91901c0290565b901b608090811c91901c0290565b901b9290920160bf1c949350505050565b60008160000361050c5750610100919050565b6000826fffffffffffffffffffffffffffffffff191660000361053157608092831b92015b826001600160c01b03191660000361054b57604092831b92015b826001600160e01b03191660000361056557602092831b92015b826001600160f01b03191660000361057f57601092831b92015b826001600160f81b03191660000361059957600892831b92015b82600f60fc1b166000036105af57600492831b92015b82600360fe1b166000036105c557600292831b92015b82600160ff1b166000036105d7576001015b92915050565b6000602082840312156105ef57600080fd5b503591905056fea2646970667358221220bdca551f20b7016a01ee86891c71e6ad830c04ffad3399a2087b9faacd91288064736f6c63430008140033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063c370ed091461003a575b600080fd5b61004d6100483660046105dd565b61005f565b60405190815260200160405180910390f35b60008061006b836100ca565b9050600060ff826001011361009b5761008c8260010160ff0385901b610131565b6001830160401b0390506100b6565b6100ab60fd19830185901c610131565b6001830160401b0390505b670de0b6b3a76400000260401c9392505050565b600080821161011f5760405162461bcd60e51b815260206004820152601960248201527f6d7573742062652067726561746572207468616e207a65726f00000000000000604482015260640160405180910390fd5b610128826104f9565b60ff0392915050565b600080600183901c8301600160ff1b8110156101585792506704ae00d1cfdeb43d60c41b01825b50600283901c8301600160ff1b81101561017d579250672934f0979a3715fd60c01b01825b50600383901c8301600160ff1b8110156101a157925066ae00d1cfdeb43d60c51b01825b50600483901c8301600160ff1b8110156101c6579250670598fdbeb244c59f60c11b01825b50600583901c8301600160ff1b8110156101eb57925067016bad3758efd87360c21b01825b50600683901c8301600160ff1b8110156102105792506702dcf2d0b85a453160c01b01825b50600783901c8301600160ff1b811015610234579250662dfca16dde10a360c31b01825b50600883901c8301600160ff1b811015610258579250665c2711b5eab1dd60c11b01825b50600983901c8301600160ff1b81101561027c579250665c3e0ffc29d59360c01b01825b50600a83901c8301600160ff1b8110156102a05792506605c4994dd0fd1560c31b01825b50600b83901c8301600160ff1b8110156102c4579250661713d62f7957c360c01b01825b50600c83901c8301600160ff1b8110156102e85792506602e291d85437f960c21b01825b50600d83901c8301600160ff1b81101561030c5792506605c53ac47e94d960c01b01825b50600e83901c8301600160ff1b81101561032f57925065b8a8c9d8be9b60c21b01825b50600f83901c8301600160ff1b8110156103535792506601715305002e4b60c01b01825b50601083901c8301600160ff1b81101561037657925065b8a9ded47c1160c01b01825b50601183901c8301600160ff1b811015610399579250655c55067f6e5960c01b01825b50601283901c8301600160ff1b8110156103bc579250652e2a8905062360c01b01825b50601383901c8301600160ff1b8110156103df57925065171545f3d72b60c01b01825b50601483901c8301600160ff1b811015610402579250650171546ac81560c31b01825b50601583901c8301600160ff1b8110156104255792506502e2a8e11acd60c11b01825b50601683901c8301600160ff1b8110156104485792506502e2a8e6e01f60c01b01825b50601783901c8301600160ff1b81101561046a579250645c551d385960c21b01825b50601883901c8301600160ff1b81101561048c57925064b8aa3acd0760c01b01825b600084600160ff1b03905060016104e87fb8aa3b295c17f0bbbe87fed0691d3e88eb577aa8dd695a588b25166cd1a1324860016104da85600187901c600160ff1b01608090811c91901c0290565b901b608090811c91901c0290565b901b9290920160bf1c949350505050565b60008160000361050c5750610100919050565b6000826fffffffffffffffffffffffffffffffff191660000361053157608092831b92015b826001600160c01b03191660000361054b57604092831b92015b826001600160e01b03191660000361056557602092831b92015b826001600160f01b03191660000361057f57601092831b92015b826001600160f81b03191660000361059957600892831b92015b82600f60fc1b166000036105af57600492831b92015b82600360fe1b166000036105c557600292831b92015b82600160ff1b166000036105d7576001015b92915050565b6000602082840312156105ef57600080fd5b503591905056fea2646970667358221220bdca551f20b7016a01ee86891c71e6ad830c04ffad3399a2087b9faacd91288064736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}