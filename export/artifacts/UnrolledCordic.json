{
  "contractName": "UnrolledCordic",
  "sourceName": "contracts/UnrolledCordic.sol",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        }
      ],
      "name": "log2Times1e18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": "0x61061061003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063c370ed091461003a575b600080fd5b61004d6100483660046105c2565b61005f565b60405190815260200160405180910390f35b60008061006b836100ca565b9050600060ff826001011361009b5761008c8260010160ff0385901b610131565b6001830160401b0390506100b6565b6100ab60fd19830185901c610131565b6001830160401b0390505b670de0b6b3a76400000260401c9392505050565b600080821161011f5760405162461bcd60e51b815260206004820152601960248201527f6d7573742062652067726561746572207468616e207a65726f00000000000000604482015260640160405180910390fd5b610128826104f9565b60ff0392915050565b600080600183901c8301600160ff1b8110156101585792506704ae00d1cfdeb43d60c41b01825b50600283901c8301600160ff1b81101561017d579250672934f0979a3715fd60c01b01825b50600383901c8301600160ff1b8110156101a157925066ae00d1cfdeb43d60c51b01825b50600483901c8301600160ff1b8110156101c6579250670598fdbeb244c59f60c11b01825b50600583901c8301600160ff1b8110156101eb57925067016bad3758efd87360c21b01825b50600683901c8301600160ff1b8110156102105792506702dcf2d0b85a453160c01b01825b50600783901c8301600160ff1b811015610234579250662dfca16dde10a360c31b01825b50600883901c8301600160ff1b811015610258579250665c2711b5eab1dd60c11b01825b50600983901c8301600160ff1b81101561027c579250665c3e0ffc29d59360c01b01825b50600a83901c8301600160ff1b8110156102a05792506605c4994dd0fd1560c31b01825b50600b83901c8301600160ff1b8110156102c4579250661713d62f7957c360c01b01825b50600c83901c8301600160ff1b8110156102e85792506602e291d85437f960c21b01825b50600d83901c8301600160ff1b81101561030c5792506605c53ac47e94d960c01b01825b50600e83901c8301600160ff1b81101561032f57925065b8a8c9d8be9b60c21b01825b50600f83901c8301600160ff1b8110156103535792506601715305002e4b60c01b01825b50601083901c8301600160ff1b81101561037657925065b8a9ded47c1160c01b01825b50601183901c8301600160ff1b811015610399579250655c55067f6e5960c01b01825b50601283901c8301600160ff1b8110156103bc579250652e2a8905062360c01b01825b50601383901c8301600160ff1b8110156103df57925065171545f3d72b60c01b01825b50601483901c8301600160ff1b811015610402579250650171546ac81560c31b01825b50601583901c8301600160ff1b8110156104255792506502e2a8e11acd60c11b01825b50601683901c8301600160ff1b8110156104485792506502e2a8e6e01f60c01b01825b50601783901c8301600160ff1b81101561046a579250645c551d385960c21b01825b50601883901c8301600160ff1b81101561048c57925064b8aa3acd0760c01b01825b600084600160ff1b03905060016104e87fb8aa3b295c17f0bbbe87fed0691d3e88eb577aa8dd695a588b25166cd1a1324860016104da85600187901c600160ff1b01608090811c91901c0290565b901b608090811c91901c0290565b901b9290920160bf1c949350505050565b6000816105095750610100919050565b60006fffffffffffffffffffffffffffffffff19831661052b57608092831b92015b6001600160c01b0319831661054257604092831b92015b6001600160e01b0319831661055957602092831b92015b6001600160f01b0319831661057057601092831b92015b6001600160f81b0319831661058757600892831b92015b600f60fc1b831661059a57600492831b92015b600360fe1b83166105ad57600292831b92015b600160ff1b83166105bc576001015b92915050565b6000602082840312156105d3578081fd5b503591905056fea264697066735822122032b922c2e6d15e5e910d17dc2b559b12b52d8f78af83f88571d60f2ef692526864736f6c63430008040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063c370ed091461003a575b600080fd5b61004d6100483660046105c2565b61005f565b60405190815260200160405180910390f35b60008061006b836100ca565b9050600060ff826001011361009b5761008c8260010160ff0385901b610131565b6001830160401b0390506100b6565b6100ab60fd19830185901c610131565b6001830160401b0390505b670de0b6b3a76400000260401c9392505050565b600080821161011f5760405162461bcd60e51b815260206004820152601960248201527f6d7573742062652067726561746572207468616e207a65726f00000000000000604482015260640160405180910390fd5b610128826104f9565b60ff0392915050565b600080600183901c8301600160ff1b8110156101585792506704ae00d1cfdeb43d60c41b01825b50600283901c8301600160ff1b81101561017d579250672934f0979a3715fd60c01b01825b50600383901c8301600160ff1b8110156101a157925066ae00d1cfdeb43d60c51b01825b50600483901c8301600160ff1b8110156101c6579250670598fdbeb244c59f60c11b01825b50600583901c8301600160ff1b8110156101eb57925067016bad3758efd87360c21b01825b50600683901c8301600160ff1b8110156102105792506702dcf2d0b85a453160c01b01825b50600783901c8301600160ff1b811015610234579250662dfca16dde10a360c31b01825b50600883901c8301600160ff1b811015610258579250665c2711b5eab1dd60c11b01825b50600983901c8301600160ff1b81101561027c579250665c3e0ffc29d59360c01b01825b50600a83901c8301600160ff1b8110156102a05792506605c4994dd0fd1560c31b01825b50600b83901c8301600160ff1b8110156102c4579250661713d62f7957c360c01b01825b50600c83901c8301600160ff1b8110156102e85792506602e291d85437f960c21b01825b50600d83901c8301600160ff1b81101561030c5792506605c53ac47e94d960c01b01825b50600e83901c8301600160ff1b81101561032f57925065b8a8c9d8be9b60c21b01825b50600f83901c8301600160ff1b8110156103535792506601715305002e4b60c01b01825b50601083901c8301600160ff1b81101561037657925065b8a9ded47c1160c01b01825b50601183901c8301600160ff1b811015610399579250655c55067f6e5960c01b01825b50601283901c8301600160ff1b8110156103bc579250652e2a8905062360c01b01825b50601383901c8301600160ff1b8110156103df57925065171545f3d72b60c01b01825b50601483901c8301600160ff1b811015610402579250650171546ac81560c31b01825b50601583901c8301600160ff1b8110156104255792506502e2a8e11acd60c11b01825b50601683901c8301600160ff1b8110156104485792506502e2a8e6e01f60c01b01825b50601783901c8301600160ff1b81101561046a579250645c551d385960c21b01825b50601883901c8301600160ff1b81101561048c57925064b8aa3acd0760c01b01825b600084600160ff1b03905060016104e87fb8aa3b295c17f0bbbe87fed0691d3e88eb577aa8dd695a588b25166cd1a1324860016104da85600187901c600160ff1b01608090811c91901c0290565b901b608090811c91901c0290565b901b9290920160bf1c949350505050565b6000816105095750610100919050565b60006fffffffffffffffffffffffffffffffff19831661052b57608092831b92015b6001600160c01b0319831661054257604092831b92015b6001600160e01b0319831661055957602092831b92015b6001600160f01b0319831661057057601092831b92015b6001600160f81b0319831661058757600892831b92015b600f60fc1b831661059a57600492831b92015b600360fe1b83166105ad57600292831b92015b600160ff1b83166105bc576001015b92915050565b6000602082840312156105d3578081fd5b503591905056fea264697066735822122032b922c2e6d15e5e910d17dc2b559b12b52d8f78af83f88571d60f2ef692526864736f6c63430008040033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "evm": {
    "bytecode": {
      "generatedSources": [],
      "linkReferences": {},
      "opcodes": "PUSH2 0x610 PUSH2 0x3A PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x2D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x35 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC370ED09 EQ PUSH2 0x3A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4D PUSH2 0x48 CALLDATASIZE PUSH1 0x4 PUSH2 0x5C2 JUMP JUMPDEST PUSH2 0x5F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6B DUP4 PUSH2 0xCA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0xFF DUP3 PUSH1 0x1 ADD SGT PUSH2 0x9B JUMPI PUSH2 0x8C DUP3 PUSH1 0x1 ADD PUSH1 0xFF SUB DUP6 SWAP1 SHL PUSH2 0x131 JUMP JUMPDEST PUSH1 0x1 DUP4 ADD PUSH1 0x40 SHL SUB SWAP1 POP PUSH2 0xB6 JUMP JUMPDEST PUSH2 0xAB PUSH1 0xFD NOT DUP4 ADD DUP6 SWAP1 SHR PUSH2 0x131 JUMP JUMPDEST PUSH1 0x1 DUP4 ADD PUSH1 0x40 SHL SUB SWAP1 POP JUMPDEST PUSH8 0xDE0B6B3A7640000 MUL PUSH1 0x40 SHR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x11F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D7573742062652067726561746572207468616E207A65726F00000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x128 DUP3 PUSH2 0x4F9 JUMP JUMPDEST PUSH1 0xFF SUB SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x158 JUMPI SWAP3 POP PUSH8 0x4AE00D1CFDEB43D PUSH1 0xC4 SHL ADD DUP3 JUMPDEST POP PUSH1 0x2 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x17D JUMPI SWAP3 POP PUSH8 0x2934F0979A3715FD PUSH1 0xC0 SHL ADD DUP3 JUMPDEST POP PUSH1 0x3 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x1A1 JUMPI SWAP3 POP PUSH7 0xAE00D1CFDEB43D PUSH1 0xC5 SHL ADD DUP3 JUMPDEST POP PUSH1 0x4 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x1C6 JUMPI SWAP3 POP PUSH8 0x598FDBEB244C59F PUSH1 0xC1 SHL ADD DUP3 JUMPDEST POP PUSH1 0x5 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x1EB JUMPI SWAP3 POP PUSH8 0x16BAD3758EFD873 PUSH1 0xC2 SHL ADD DUP3 JUMPDEST POP PUSH1 0x6 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x210 JUMPI SWAP3 POP PUSH8 0x2DCF2D0B85A4531 PUSH1 0xC0 SHL ADD DUP3 JUMPDEST POP PUSH1 0x7 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x234 JUMPI SWAP3 POP PUSH7 0x2DFCA16DDE10A3 PUSH1 0xC3 SHL ADD DUP3 JUMPDEST POP PUSH1 0x8 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x258 JUMPI SWAP3 POP PUSH7 0x5C2711B5EAB1DD PUSH1 0xC1 SHL ADD DUP3 JUMPDEST POP PUSH1 0x9 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x27C JUMPI SWAP3 POP PUSH7 0x5C3E0FFC29D593 PUSH1 0xC0 SHL ADD DUP3 JUMPDEST POP PUSH1 0xA DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x2A0 JUMPI SWAP3 POP PUSH7 0x5C4994DD0FD15 PUSH1 0xC3 SHL ADD DUP3 JUMPDEST POP PUSH1 0xB DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x2C4 JUMPI SWAP3 POP PUSH7 0x1713D62F7957C3 PUSH1 0xC0 SHL ADD DUP3 JUMPDEST POP PUSH1 0xC DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x2E8 JUMPI SWAP3 POP PUSH7 0x2E291D85437F9 PUSH1 0xC2 SHL ADD DUP3 JUMPDEST POP PUSH1 0xD DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x30C JUMPI SWAP3 POP PUSH7 0x5C53AC47E94D9 PUSH1 0xC0 SHL ADD DUP3 JUMPDEST POP PUSH1 0xE DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x32F JUMPI SWAP3 POP PUSH6 0xB8A8C9D8BE9B PUSH1 0xC2 SHL ADD DUP3 JUMPDEST POP PUSH1 0xF DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x353 JUMPI SWAP3 POP PUSH7 0x1715305002E4B PUSH1 0xC0 SHL ADD DUP3 JUMPDEST POP PUSH1 0x10 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x376 JUMPI SWAP3 POP PUSH6 0xB8A9DED47C11 PUSH1 0xC0 SHL ADD DUP3 JUMPDEST POP PUSH1 0x11 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x399 JUMPI SWAP3 POP PUSH6 0x5C55067F6E59 PUSH1 0xC0 SHL ADD DUP3 JUMPDEST POP PUSH1 0x12 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x3BC JUMPI SWAP3 POP PUSH6 0x2E2A89050623 PUSH1 0xC0 SHL ADD DUP3 JUMPDEST POP PUSH1 0x13 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x3DF JUMPI SWAP3 POP PUSH6 0x171545F3D72B PUSH1 0xC0 SHL ADD DUP3 JUMPDEST POP PUSH1 0x14 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x402 JUMPI SWAP3 POP PUSH6 0x171546AC815 PUSH1 0xC3 SHL ADD DUP3 JUMPDEST POP PUSH1 0x15 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x425 JUMPI SWAP3 POP PUSH6 0x2E2A8E11ACD PUSH1 0xC1 SHL ADD DUP3 JUMPDEST POP PUSH1 0x16 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x448 JUMPI SWAP3 POP PUSH6 0x2E2A8E6E01F PUSH1 0xC0 SHL ADD DUP3 JUMPDEST POP PUSH1 0x17 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x46A JUMPI SWAP3 POP PUSH5 0x5C551D3859 PUSH1 0xC2 SHL ADD DUP3 JUMPDEST POP PUSH1 0x18 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x48C JUMPI SWAP3 POP PUSH5 0xB8AA3ACD07 PUSH1 0xC0 SHL ADD DUP3 JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0xFF SHL SUB SWAP1 POP PUSH1 0x1 PUSH2 0x4E8 PUSH32 0xB8AA3B295C17F0BBBE87FED0691D3E88EB577AA8DD695A588B25166CD1A13248 PUSH1 0x1 PUSH2 0x4DA DUP6 PUSH1 0x1 DUP8 SWAP1 SHR PUSH1 0x1 PUSH1 0xFF SHL ADD PUSH1 0x80 SWAP1 DUP2 SHR SWAP2 SWAP1 SHR MUL SWAP1 JUMP JUMPDEST SWAP1 SHL PUSH1 0x80 SWAP1 DUP2 SHR SWAP2 SWAP1 SHR MUL SWAP1 JUMP JUMPDEST SWAP1 SHL SWAP3 SWAP1 SWAP3 ADD PUSH1 0xBF SHR SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x509 JUMPI POP PUSH2 0x100 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND PUSH2 0x52B JUMPI PUSH1 0x80 SWAP3 DUP4 SHL SWAP3 ADD JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT DUP4 AND PUSH2 0x542 JUMPI PUSH1 0x40 SWAP3 DUP4 SHL SWAP3 ADD JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH2 0x559 JUMPI PUSH1 0x20 SWAP3 DUP4 SHL SWAP3 ADD JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT DUP4 AND PUSH2 0x570 JUMPI PUSH1 0x10 SWAP3 DUP4 SHL SWAP3 ADD JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP4 AND PUSH2 0x587 JUMPI PUSH1 0x8 SWAP3 DUP4 SHL SWAP3 ADD JUMPDEST PUSH1 0xF PUSH1 0xFC SHL DUP4 AND PUSH2 0x59A JUMPI PUSH1 0x4 SWAP3 DUP4 SHL SWAP3 ADD JUMPDEST PUSH1 0x3 PUSH1 0xFE SHL DUP4 AND PUSH2 0x5AD JUMPI PUSH1 0x2 SWAP3 DUP4 SHL SWAP3 ADD JUMPDEST PUSH1 0x1 PUSH1 0xFF SHL DUP4 AND PUSH2 0x5BC JUMPI PUSH1 0x1 ADD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5D3 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ORIGIN 0xB9 0x22 0xC2 0xE6 0xD1 0x5E 0x5E SWAP2 0xD OR 0xDC 0x2B SSTORE SWAP12 SLT 0xB5 0x2D DUP16 PUSH25 0xAF83F88571D60F2EF692526864736F6C634300080400330000 ",
      "sourceMap": "710:7445:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;710:7445:0;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:750:1",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:1",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "84:120:1",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "130:26:1",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "139:6:1"
                                },
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "147:6:1"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "132:6:1"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "132:22:1"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "132:22:1"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "105:7:1"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "114:9:1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "101:3:1"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "101:23:1"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "126:2:1",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "97:3:1"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "97:32:1"
                      },
                      "nodeType": "YulIf",
                      "src": "94:2:1"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "165:33:1",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "188:9:1"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "175:12:1"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "175:23:1"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "165:6:1"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "50:9:1",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "61:7:1",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "73:6:1",
                    "type": ""
                  }
                ],
                "src": "14:190:1"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "383:175:1",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "400:9:1"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "411:2:1",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "393:6:1"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "393:21:1"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "393:21:1"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "434:9:1"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "445:2:1",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "430:3:1"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "430:18:1"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "450:2:1",
                            "type": "",
                            "value": "25"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "423:6:1"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "423:30:1"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "423:30:1"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "473:9:1"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "484:2:1",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "469:3:1"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "469:18:1"
                          },
                          {
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "489:27:1",
                            "type": "",
                            "value": "must be greater than zero"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "462:6:1"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "462:55:1"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "462:55:1"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "526:26:1",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "538:9:1"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "549:2:1",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "534:3:1"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "534:18:1"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "526:4:1"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_69b144e1b606a2a1bc3b34f5567e01397a9f79c9ea6ad466c29e199e26d85715__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "360:9:1",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "374:4:1",
                    "type": ""
                  }
                ],
                "src": "209:349:1"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "672:76:1",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "682:26:1",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "694:9:1"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "705:2:1",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "690:3:1"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "690:18:1"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "682:4:1"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "724:9:1"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "735:6:1"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "717:6:1"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "717:25:1"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "717:25:1"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "641:9:1",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "652:6:1",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "663:4:1",
                    "type": ""
                  }
                ],
                "src": "563:185:1"
              }
            ]
          },
          "contents": "{\n    { }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_69b144e1b606a2a1bc3b34f5567e01397a9f79c9ea6ad466c29e199e26d85715__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"must be greater than zero\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}",
          "id": 1,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "immutableReferences": {},
      "linkReferences": {},
      "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x35 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC370ED09 EQ PUSH2 0x3A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4D PUSH2 0x48 CALLDATASIZE PUSH1 0x4 PUSH2 0x5C2 JUMP JUMPDEST PUSH2 0x5F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6B DUP4 PUSH2 0xCA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0xFF DUP3 PUSH1 0x1 ADD SGT PUSH2 0x9B JUMPI PUSH2 0x8C DUP3 PUSH1 0x1 ADD PUSH1 0xFF SUB DUP6 SWAP1 SHL PUSH2 0x131 JUMP JUMPDEST PUSH1 0x1 DUP4 ADD PUSH1 0x40 SHL SUB SWAP1 POP PUSH2 0xB6 JUMP JUMPDEST PUSH2 0xAB PUSH1 0xFD NOT DUP4 ADD DUP6 SWAP1 SHR PUSH2 0x131 JUMP JUMPDEST PUSH1 0x1 DUP4 ADD PUSH1 0x40 SHL SUB SWAP1 POP JUMPDEST PUSH8 0xDE0B6B3A7640000 MUL PUSH1 0x40 SHR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x11F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D7573742062652067726561746572207468616E207A65726F00000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x128 DUP3 PUSH2 0x4F9 JUMP JUMPDEST PUSH1 0xFF SUB SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x158 JUMPI SWAP3 POP PUSH8 0x4AE00D1CFDEB43D PUSH1 0xC4 SHL ADD DUP3 JUMPDEST POP PUSH1 0x2 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x17D JUMPI SWAP3 POP PUSH8 0x2934F0979A3715FD PUSH1 0xC0 SHL ADD DUP3 JUMPDEST POP PUSH1 0x3 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x1A1 JUMPI SWAP3 POP PUSH7 0xAE00D1CFDEB43D PUSH1 0xC5 SHL ADD DUP3 JUMPDEST POP PUSH1 0x4 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x1C6 JUMPI SWAP3 POP PUSH8 0x598FDBEB244C59F PUSH1 0xC1 SHL ADD DUP3 JUMPDEST POP PUSH1 0x5 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x1EB JUMPI SWAP3 POP PUSH8 0x16BAD3758EFD873 PUSH1 0xC2 SHL ADD DUP3 JUMPDEST POP PUSH1 0x6 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x210 JUMPI SWAP3 POP PUSH8 0x2DCF2D0B85A4531 PUSH1 0xC0 SHL ADD DUP3 JUMPDEST POP PUSH1 0x7 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x234 JUMPI SWAP3 POP PUSH7 0x2DFCA16DDE10A3 PUSH1 0xC3 SHL ADD DUP3 JUMPDEST POP PUSH1 0x8 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x258 JUMPI SWAP3 POP PUSH7 0x5C2711B5EAB1DD PUSH1 0xC1 SHL ADD DUP3 JUMPDEST POP PUSH1 0x9 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x27C JUMPI SWAP3 POP PUSH7 0x5C3E0FFC29D593 PUSH1 0xC0 SHL ADD DUP3 JUMPDEST POP PUSH1 0xA DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x2A0 JUMPI SWAP3 POP PUSH7 0x5C4994DD0FD15 PUSH1 0xC3 SHL ADD DUP3 JUMPDEST POP PUSH1 0xB DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x2C4 JUMPI SWAP3 POP PUSH7 0x1713D62F7957C3 PUSH1 0xC0 SHL ADD DUP3 JUMPDEST POP PUSH1 0xC DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x2E8 JUMPI SWAP3 POP PUSH7 0x2E291D85437F9 PUSH1 0xC2 SHL ADD DUP3 JUMPDEST POP PUSH1 0xD DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x30C JUMPI SWAP3 POP PUSH7 0x5C53AC47E94D9 PUSH1 0xC0 SHL ADD DUP3 JUMPDEST POP PUSH1 0xE DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x32F JUMPI SWAP3 POP PUSH6 0xB8A8C9D8BE9B PUSH1 0xC2 SHL ADD DUP3 JUMPDEST POP PUSH1 0xF DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x353 JUMPI SWAP3 POP PUSH7 0x1715305002E4B PUSH1 0xC0 SHL ADD DUP3 JUMPDEST POP PUSH1 0x10 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x376 JUMPI SWAP3 POP PUSH6 0xB8A9DED47C11 PUSH1 0xC0 SHL ADD DUP3 JUMPDEST POP PUSH1 0x11 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x399 JUMPI SWAP3 POP PUSH6 0x5C55067F6E59 PUSH1 0xC0 SHL ADD DUP3 JUMPDEST POP PUSH1 0x12 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x3BC JUMPI SWAP3 POP PUSH6 0x2E2A89050623 PUSH1 0xC0 SHL ADD DUP3 JUMPDEST POP PUSH1 0x13 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x3DF JUMPI SWAP3 POP PUSH6 0x171545F3D72B PUSH1 0xC0 SHL ADD DUP3 JUMPDEST POP PUSH1 0x14 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x402 JUMPI SWAP3 POP PUSH6 0x171546AC815 PUSH1 0xC3 SHL ADD DUP3 JUMPDEST POP PUSH1 0x15 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x425 JUMPI SWAP3 POP PUSH6 0x2E2A8E11ACD PUSH1 0xC1 SHL ADD DUP3 JUMPDEST POP PUSH1 0x16 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x448 JUMPI SWAP3 POP PUSH6 0x2E2A8E6E01F PUSH1 0xC0 SHL ADD DUP3 JUMPDEST POP PUSH1 0x17 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x46A JUMPI SWAP3 POP PUSH5 0x5C551D3859 PUSH1 0xC2 SHL ADD DUP3 JUMPDEST POP PUSH1 0x18 DUP4 SWAP1 SHR DUP4 ADD PUSH1 0x1 PUSH1 0xFF SHL DUP2 LT ISZERO PUSH2 0x48C JUMPI SWAP3 POP PUSH5 0xB8AA3ACD07 PUSH1 0xC0 SHL ADD DUP3 JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0xFF SHL SUB SWAP1 POP PUSH1 0x1 PUSH2 0x4E8 PUSH32 0xB8AA3B295C17F0BBBE87FED0691D3E88EB577AA8DD695A588B25166CD1A13248 PUSH1 0x1 PUSH2 0x4DA DUP6 PUSH1 0x1 DUP8 SWAP1 SHR PUSH1 0x1 PUSH1 0xFF SHL ADD PUSH1 0x80 SWAP1 DUP2 SHR SWAP2 SWAP1 SHR MUL SWAP1 JUMP JUMPDEST SWAP1 SHL PUSH1 0x80 SWAP1 DUP2 SHR SWAP2 SWAP1 SHR MUL SWAP1 JUMP JUMPDEST SWAP1 SHL SWAP3 SWAP1 SWAP3 ADD PUSH1 0xBF SHR SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x509 JUMPI POP PUSH2 0x100 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND PUSH2 0x52B JUMPI PUSH1 0x80 SWAP3 DUP4 SHL SWAP3 ADD JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT DUP4 AND PUSH2 0x542 JUMPI PUSH1 0x40 SWAP3 DUP4 SHL SWAP3 ADD JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH2 0x559 JUMPI PUSH1 0x20 SWAP3 DUP4 SHL SWAP3 ADD JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT DUP4 AND PUSH2 0x570 JUMPI PUSH1 0x10 SWAP3 DUP4 SHL SWAP3 ADD JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP4 AND PUSH2 0x587 JUMPI PUSH1 0x8 SWAP3 DUP4 SHL SWAP3 ADD JUMPDEST PUSH1 0xF PUSH1 0xFC SHL DUP4 AND PUSH2 0x59A JUMPI PUSH1 0x4 SWAP3 DUP4 SHL SWAP3 ADD JUMPDEST PUSH1 0x3 PUSH1 0xFE SHL DUP4 AND PUSH2 0x5AD JUMPI PUSH1 0x2 SWAP3 DUP4 SHL SWAP3 ADD JUMPDEST PUSH1 0x1 PUSH1 0xFF SHL DUP4 AND PUSH2 0x5BC JUMPI PUSH1 0x1 ADD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5D3 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ORIGIN 0xB9 0x22 0xC2 0xE6 0xD1 0x5E 0x5E SWAP2 0xD OR 0xDC 0x2B SSTORE SWAP12 SLT 0xB5 0x2D DUP16 PUSH25 0xAF83F88571D60F2EF692526864736F6C634300080400330000 ",
      "sourceMap": "710:7445:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;5651:464;;;;;;:::i;:::-;;:::i;:::-;;;717:25:1;;;705:2;690:18;5651:464:0;;;;;;;;5710:7;5729:9;5741:10;5747:3;5741:5;:10::i;:::-;5729:22;;5761:17;5826:3;5816:2;5821:1;5816:6;:13;5812:243;;5886:39;5916:2;5921:1;5916:6;5902:3;:21;5894:3;:30;;5886:7;:39::i;:::-;5875:1;5870:6;;953:2;5862:20;5861:64;;-1:-1:-1;5812:243:0;;;6001:39;-1:-1:-1;;6024:14:0;;6009:30;;;6001:7;:39::i;:::-;5990:1;5985:6;;953:2;5977:20;5976:64;;-1:-1:-1;5812:243:0;6088:4;6076:16;953:2;6075:23;;5651:464;-1:-1:-1;;;5651:464:0:o;6280:194::-;6331:6;6363:1;6357:3;:7;6349:45;;;;-1:-1:-1;;;6349:45:0;;411:2:1;6349:45:0;;;393:21:1;450:2;430:18;;;423:30;489:27;469:18;;;462:55;534:18;;6349:45:0;;;;;;;;6448:8;6452:3;6448;:8::i;:::-;6435:3;:22;;6280:194;-1:-1:-1;;6280:194:0:o;1541:4104::-;1592:7;;1771:1;1766:6;;;1761:12;;-1:-1:-1;;;1791:7:0;;1787:89;;;1822:1;-1:-1:-1;;;;1841:20:0;1822:1;1787:89;-1:-1:-1;1903:1:0;1898:6;;;1893:12;;-1:-1:-1;;;1923:7:0;;1919:97;;;1954:1;-1:-1:-1;;;;1973:28:0;1954:1;1919:97;-1:-1:-1;2043:1:0;2038:6;;;2033:12;;-1:-1:-1;;;2063:7:0;;2059:98;;;2094:1;-1:-1:-1;;;;2113:29:0;2094:1;2059:98;-1:-1:-1;2184:1:0;2179:6;;;2174:12;;-1:-1:-1;;;2204:7:0;;2200:98;;;2235:1;-1:-1:-1;;;;2254:29:0;2235:1;2200:98;-1:-1:-1;2404:1:0;2399:6;;;2394:12;;-1:-1:-1;;;2424:7:0;;2420:89;;;2455:1;-1:-1:-1;;;;2474:20:0;2455:1;2420:89;-1:-1:-1;2536:1:0;2531:6;;;2526:12;;-1:-1:-1;;;2556:7:0;;2552:97;;;2587:1;-1:-1:-1;;;;2606:28:0;2587:1;2552:97;-1:-1:-1;2676:1:0;2671:6;;;2666:12;;-1:-1:-1;;;2696:7:0;;2692:98;;;2727:1;-1:-1:-1;;;;2746:29:0;2727:1;2692:98;-1:-1:-1;2817:1:0;2812:6;;;2807:12;;-1:-1:-1;;;2837:7:0;;2833:98;;;2868:1;-1:-1:-1;;;;2887:29:0;2868:1;2833:98;-1:-1:-1;3038:1:0;3033:6;;;3028:12;;-1:-1:-1;;;3058:7:0;;3054:89;;;3089:1;-1:-1:-1;;;;3108:20:0;3089:1;3054:89;-1:-1:-1;3170:2:0;3165:7;;;3160:13;;-1:-1:-1;;;3191:7:0;;3187:97;;;3222:1;-1:-1:-1;;;;3241:28:0;3222:1;3187:97;-1:-1:-1;3311:2:0;3306:7;;;3301:13;;-1:-1:-1;;;3332:7:0;;3328:98;;;3363:1;-1:-1:-1;;;;3382:29:0;3363:1;3328:98;-1:-1:-1;3453:2:0;3448:7;;;3443:13;;-1:-1:-1;;;3474:7:0;;3470:98;;;3505:1;-1:-1:-1;;;;3524:29:0;3505:1;3470:98;-1:-1:-1;3676:2:0;3671:7;;;3666:13;;-1:-1:-1;;;3697:7:0;;3693:89;;;3728:1;-1:-1:-1;;;;3747:20:0;3728:1;3693:89;-1:-1:-1;3809:2:0;3804:7;;;3799:13;;-1:-1:-1;;;3830:7:0;;3826:97;;;3861:1;-1:-1:-1;;;;3880:28:0;3861:1;3826:97;-1:-1:-1;3950:2:0;3945:7;;;3940:13;;-1:-1:-1;;;3971:7:0;;3967:98;;;4002:1;-1:-1:-1;;;;4021:29:0;4002:1;3967:98;-1:-1:-1;4092:2:0;4087:7;;;4082:13;;-1:-1:-1;;;4113:7:0;;4109:98;;;4144:1;-1:-1:-1;;;;4163:29:0;4144:1;4109:98;-1:-1:-1;4315:2:0;4310:7;;;4305:13;;-1:-1:-1;;;4336:7:0;;4332:89;;;4367:1;-1:-1:-1;;;;4386:20:0;4367:1;4332:89;-1:-1:-1;4448:2:0;4443:7;;;4438:13;;-1:-1:-1;;;4469:7:0;;4465:97;;;4500:1;-1:-1:-1;;;;4519:28:0;4500:1;4465:97;-1:-1:-1;4589:2:0;4584:7;;;4579:13;;-1:-1:-1;;;4610:7:0;;4606:98;;;4641:1;-1:-1:-1;;;;4660:29:0;4641:1;4606:98;-1:-1:-1;4731:2:0;4726:7;;;4721:13;;-1:-1:-1;;;4752:7:0;;4748:98;;;4783:1;-1:-1:-1;;;;4802:29:0;4783:1;4748:98;-1:-1:-1;4954:2:0;4949:7;;;4944:13;;-1:-1:-1;;;4975:7:0;;4971:89;;;5006:1;-1:-1:-1;;;;5025:20:0;5006:1;4971:89;-1:-1:-1;5087:2:0;5082:7;;;5077:13;;-1:-1:-1;;;5108:7:0;;5104:97;;;5139:1;-1:-1:-1;;;;5158:28:0;5139:1;5104:97;-1:-1:-1;5228:2:0;5223:7;;;5218:13;;-1:-1:-1;;;5249:7:0;;5245:98;;;5280:1;-1:-1:-1;;;;5299:29:0;5280:1;5245:98;-1:-1:-1;5370:2:0;5365:7;;;5360:13;;-1:-1:-1;;;5391:7:0;;5387:98;;;5422:1;-1:-1:-1;;;;5441:29:0;5422:1;5387:98;5499:9;5517:1;-1:-1:-1;;;5511:7:0;5499:19;;5591:1;5537:50;860:66;5585:1;5554:27;5563:1;5578;5573;:6;;-1:-1:-1;;;5566:14:0;6253:3;6248:8;;;6235;;;6234:23;;6121:153;5554:27;:32;;6253:3;6248:8;;;6235;;;6234:23;;6121:153;5537:50;:55;;5532:60;;;;5619:8;5613:15;;1541:4104;-1:-1:-1;;;;1541:4104:0:o;6612:1541::-;6662:7;6685:9;6681:25;;-1:-1:-1;6703:3:0;;6612:1541;-1:-1:-1;6612:1541:0:o;6681:25::-;6740:9;-1:-1:-1;;6771:73:0;;6767:164;;6877:3;6905:11;;;;6873:7;6767:164;-1:-1:-1;;;;;;6948:73:0;;6944:162;;7054:2;7081:10;;;;7050:6;6944:162;-1:-1:-1;;;;;;7123:73:0;;7119:162;;7229:2;7256:10;;;;7225:6;7119:162;-1:-1:-1;;;;;;7298:73:0;;7294:162;;7404:2;7431:10;;;;7400:6;7294:162;-1:-1:-1;;;;;;7473:73:0;;7469:160;;7579:1;7605:9;;;;7575:5;7469:160;-1:-1:-1;;;7646:73:0;;7642:160;;7752:1;7778:9;;;;7748:5;7642:160;-1:-1:-1;;;7819:73:0;;7815:160;;7925:1;7951:9;;;;7921:5;7815:160;-1:-1:-1;;;7992:73:0;;7988:126;;8098:1;8094:5;7988:126;8135:1;6612:1541;-1:-1:-1;;6612:1541:0:o;14:190:1:-;73:6;126:2;114:9;105:7;101:23;97:32;94:2;;;147:6;139;132:22;94:2;-1:-1:-1;175:23:1;;84:120;-1:-1:-1;84:120:1:o"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "310400",
        "executionCost": "380",
        "totalCost": "310780"
      },
      "external": {
        "log2Times1e18(uint256)": "2822"
      },
      "internal": {
        "clz(uint256)": "439",
        "ilog2(uint256)": "infinite",
        "log2m64(uint256)": "1926",
        "mulhi128(uint256,uint256)": "infinite"
      }
    },
    "methodIdentifiers": {
      "log2Times1e18(uint256)": "c370ed09"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log2Times1e18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UnrolledCordic.sol\":\"UnrolledCordic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/UnrolledCordic.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n///@title UnrolledCordic.sol\\n///@author Gabriel Barros, Diego Nehab\\npragma solidity ^0.8.0;\\n\\nlibrary UnrolledCordic {\\n    uint256 constant one = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 constant log2_e = 0xb8aa3b295c17f0bbbe87fed0691d3e88eb577aa8dd695a588b25166cd1a13248;\\n\\n    uint64 constant N = 64;\\n    uint256 constant log2_ks0 = 0xb31fb7d64898b3e15c01a39fbd687a02934f0979a3715fd4ae00d1cfdeb43d0;\\n    uint256 constant log2_ks1 = 0xb84e236bd563ba016fe50b6ef0851802dcf2d0b85a453105aeb4dd63bf61cc;\\n    uint256 constant log2_ks2 = 0xb8a476150dfe4001713d62f7957c3002e24ca6e87e8a8005c3e0ffc29d593;\\n    uint256 constant log2_ks3 = 0xb8a9ded47c110001715305002e4b0002e2a32762fa6c0005c53ac47e94d9;\\n    uint256 constant log2_ks4 = 0xb8aa35640a80000171545f3d72b00002e2a8905062300005c55067f6e59;\\n    uint256 constant log2_ks5 = 0xb8aa3acd07000001715474e164000002e2a8e6e01f000005c551c2359a;\\n\\n    function log2m64(uint256 x) internal pure returns (uint256) {\\n        uint256 y = 0;\\n        uint256 t;\\n\\n        unchecked {\\n            // round(log_2(1+1/2^i)*2^64) for i = 1..4 packed into 64bits each\\n            t = x + (x >> 1);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks0 << 192;\\n            }\\n            t = x + (x >> 2);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks0 >> 64) << 192;\\n            }\\n            t = x + (x >> 3);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks0 >> 128) << 192;\\n            }\\n            t = x + (x >> 4);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks0 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 5..8 packed into 64bits each\\n            t = x + (x >> 5);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks1 << 192;\\n            }\\n            t = x + (x >> 6);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks1 >> 64) << 192;\\n            }\\n            t = x + (x >> 7);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks1 >> 128) << 192;\\n            }\\n            t = x + (x >> 8);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks1 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 9..12 packed into 64bits each\\n            t = x + (x >> 9);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks2 << 192;\\n            }\\n            t = x + (x >> 10);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks2 >> 64) << 192;\\n            }\\n            t = x + (x >> 11);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks2 >> 128) << 192;\\n            }\\n            t = x + (x >> 12);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks2 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 13..16 packed into 64bits each\\n            t = x + (x >> 13);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks3 << 192;\\n            }\\n            t = x + (x >> 14);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks3 >> 64) << 192;\\n            }\\n            t = x + (x >> 15);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks3 >> 128) << 192;\\n            }\\n            t = x + (x >> 16);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks3 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 17..20 packed into 64bits each\\n            t = x + (x >> 17);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks4 << 192;\\n            }\\n            t = x + (x >> 18);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks4 >> 64) << 192;\\n            }\\n            t = x + (x >> 19);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks4 >> 128) << 192;\\n            }\\n            t = x + (x >> 20);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks4 >> 192) << 192;\\n            }\\n            // round(log_2(1+1/2^i)*2^64) for i = 21..24 packed into 64bits each\\n            t = x + (x >> 21);\\n            if (t < one) {\\n                x = t;\\n                y += log2_ks5 << 192;\\n            }\\n            t = x + (x >> 22);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks5 >> 64) << 192;\\n            }\\n            t = x + (x >> 23);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks5 >> 128) << 192;\\n            }\\n            t = x + (x >> 24);\\n            if (t < one) {\\n                x = t;\\n                y += (log2_ks5 >> 192) << 192;\\n            }\\n\\n            uint256 r = one - x;\\n            y += mulhi128(log2_e, mulhi128(r, one + (r >> 1)) << 1) << 1;\\n            return y >> (255 - 64);\\n        }\\n    }\\n\\n    function log2Times1e18(uint256 val) external pure returns (uint256) {\\n        int256 il = ilog2(val);\\n        uint256 skewedRes;\\n        unchecked {\\n            if (il + 1 <= 255) {\\n                skewedRes = (uint256(il + 1) << N) - log2m64(val << (255 - uint256(il + 1)));\\n            } else {\\n                skewedRes = (uint256(il + 1) << N) - log2m64(val >> uint256((il + 1) - 255));\\n            }\\n            return (skewedRes * 1e18) >> N;\\n        }\\n    }\\n\\n    function mulhi128(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            return (a >> 128) * (b >> 128);\\n        }\\n    }\\n\\n    function ilog2(uint256 val) internal pure returns (int256) {\\n        require(val > 0, \\\"must be greater than zero\\\");\\n        unchecked {\\n            return 255 - int256(clz(val));\\n        }\\n    }\\n\\n    /// @notice count leading zeros\\n    /// @param _num number you want the clz of\\n    /// @dev this a binary search implementation\\n    function clz(uint256 _num) internal pure returns (uint256) {\\n        if (_num == 0) return 256;\\n        unchecked {\\n            uint256 n = 0;\\n            if (_num & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 == 0) {\\n                n = n + 128;\\n                _num = _num << 128;\\n            }\\n            if (_num & 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 64;\\n                _num = _num << 64;\\n            }\\n            if (_num & 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 32;\\n                _num = _num << 32;\\n            }\\n            if (_num & 0xFFFF000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 16;\\n                _num = _num << 16;\\n            }\\n            if (_num & 0xFF00000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 8;\\n                _num = _num << 8;\\n            }\\n            if (_num & 0xF000000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 4;\\n                _num = _num << 4;\\n            }\\n            if (_num & 0xC000000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 2;\\n                _num = _num << 2;\\n            }\\n            if (_num & 0x8000000000000000000000000000000000000000000000000000000000000000 == 0) {\\n                n = n + 1;\\n            }\\n\\n            return n;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdf677afbc4b061c8d5ca62ebd23565ae34a4b5a67a9c1d420ca0a5cf533caa60\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}