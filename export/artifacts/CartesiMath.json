{
  "contractName": "CartesiMath",
  "sourceName": "contracts/CartesiMath.sol",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_num",
          "type": "uint256"
        }
      ],
      "name": "getLog2TableTimes1M",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_num",
          "type": "uint256"
        }
      ],
      "name": "log2ApproxTimes1M",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": "0x610439610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806332ef283b14610045578063e3581b6814610074575b600080fd5b6100626004803603602081101561005b57600080fd5b5035610091565b60408051918252519081900360200190f35b6100626004803603602081101561008a57600080fd5b5035610107565b600080805b60038160ff1610156100fb576000604051806101a00160405280610180815260200161028461018091398260ff166001870360030201815181106100d657fe5b01602001516001600160f81b03191660ff60088402161c929092179150600101610096565b5060e81c90505b919050565b6000808211610155576040805162461bcd60e51b81526020600482015260156024820152744e756d6265722063616e6e6f74206265207a65726f60581b604482015290519081900360640190fd5b6000826001141561016a576000915050610102565b5b608083111561018057600192831c920161016b565b61019f61018c84610091565b61019983620f42406101a6565b90610208565b9392505050565b6000826101b557506000610202565b828202828482816101c257fe5b04146101ff5760405162461bcd60e51b81526004018080602001828103825260218152602001806102636021913960400191505060405180910390fd5b90505b92915050565b6000828201838110156101ff576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fdfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f770000000f4240182f421e8480236e082771822ad63a2dc6c0305e8532b04834c96736b3c23876d73a187a3b9d4a3d09003e5ea63fa0c540d17741f28843057d440ba745062945f60246dc1047b917488dc7495aba4a207c4adf8a4b98544c4b404cf8aa4da0e64e44434ee3054f7d6d5013b750a61a5134c851bff05247bd52cc58534de753cc8d54486954c19c55384255ac75561e50568de956fb575766b057d00758376f589cfa5900ba5962bc59c3135a21ca5a7ef15ada945b34bf5b8d805be4df5c3aea5c8fa95ce3265d356c5d86835dd6735e25455e73005ebfad5f0b525f55f75f9fa25fe85a60302460770860bd0a61023061467f6189fd61ccae620e98624fbf62902762cfd5630ecd634d12638aa963c7966403dc643f7f647a8264b4e864eeb56527ec6560906598a365d029660724663d9766738566a8f066ddda6712476746386779af67acaf67df3a6811526842fa68743268a4fc68d55c6905536934e169640a6992cf69c13169ef326a1cd46a4a186a76ff6aa38c6acfc0a26469706673582212204f905fe0579cad7d46c7f4e810e21ce57ab2a65919f34804a7c6c2ba21f5863164736f6c63430007040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806332ef283b14610045578063e3581b6814610074575b600080fd5b6100626004803603602081101561005b57600080fd5b5035610091565b60408051918252519081900360200190f35b6100626004803603602081101561008a57600080fd5b5035610107565b600080805b60038160ff1610156100fb576000604051806101a00160405280610180815260200161028461018091398260ff166001870360030201815181106100d657fe5b01602001516001600160f81b03191660ff60088402161c929092179150600101610096565b5060e81c90505b919050565b6000808211610155576040805162461bcd60e51b81526020600482015260156024820152744e756d6265722063616e6e6f74206265207a65726f60581b604482015290519081900360640190fd5b6000826001141561016a576000915050610102565b5b608083111561018057600192831c920161016b565b61019f61018c84610091565b61019983620f42406101a6565b90610208565b9392505050565b6000826101b557506000610202565b828202828482816101c257fe5b04146101ff5760405162461bcd60e51b81526004018080602001828103825260218152602001806102636021913960400191505060405180910390fd5b90505b92915050565b6000828201838110156101ff576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fdfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f770000000f4240182f421e8480236e082771822ad63a2dc6c0305e8532b04834c96736b3c23876d73a187a3b9d4a3d09003e5ea63fa0c540d17741f28843057d440ba745062945f60246dc1047b917488dc7495aba4a207c4adf8a4b98544c4b404cf8aa4da0e64e44434ee3054f7d6d5013b750a61a5134c851bff05247bd52cc58534de753cc8d54486954c19c55384255ac75561e50568de956fb575766b057d00758376f589cfa5900ba5962bc59c3135a21ca5a7ef15ada945b34bf5b8d805be4df5c3aea5c8fa95ce3265d356c5d86835dd6735e25455e73005ebfad5f0b525f55f75f9fa25fe85a60302460770860bd0a61023061467f6189fd61ccae620e98624fbf62902762cfd5630ecd634d12638aa963c7966403dc643f7f647a8264b4e864eeb56527ec6560906598a365d029660724663d9766738566a8f066ddda6712476746386779af67acaf67df3a6811526842fa68743268a4fc68d55c6905536934e169640a6992cf69c13169ef326a1cd46a4a186a76ff6aa38c6acfc0a26469706673582212204f905fe0579cad7d46c7f4e810e21ce57ab2a65919f34804a7c6c2ba21f5863164736f6c63430007040033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "log2ApproxTimes1M(uint256)": {
        "params": {
          "_num": "number to take log2 * 1M of"
        }
      }
    },
    "version": 1
  },
  "evm": {
    "bytecode": {
      "generatedSources": [],
      "linkReferences": {},
      "opcodes": "PUSH2 0x439 PUSH2 0x26 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x19 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x40 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x32EF283B EQ PUSH2 0x45 JUMPI DUP1 PUSH4 0xE3581B68 EQ PUSH2 0x74 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x62 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x91 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x62 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x107 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST PUSH1 0x3 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0xFB JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH2 0x1A0 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x180 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x284 PUSH2 0x180 SWAP2 CODECOPY DUP3 PUSH1 0xFF AND PUSH1 0x1 DUP8 SUB PUSH1 0x3 MUL ADD DUP2 MLOAD DUP2 LT PUSH2 0xD6 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0xFF PUSH1 0x8 DUP5 MUL AND SHR SWAP3 SWAP1 SWAP3 OR SWAP2 POP PUSH1 0x1 ADD PUSH2 0x96 JUMP JUMPDEST POP PUSH1 0xE8 SHR SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x155 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x4E756D6265722063616E6E6F74206265207A65726F PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 EQ ISZERO PUSH2 0x16A JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x102 JUMP JUMPDEST JUMPDEST PUSH1 0x80 DUP4 GT ISZERO PUSH2 0x180 JUMPI PUSH1 0x1 SWAP3 DUP4 SHR SWAP3 ADD PUSH2 0x16B JUMP JUMPDEST PUSH2 0x19F PUSH2 0x18C DUP5 PUSH2 0x91 JUMP JUMPDEST PUSH2 0x199 DUP4 PUSH3 0xF4240 PUSH2 0x1A6 JUMP JUMPDEST SWAP1 PUSH2 0x208 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1B5 JUMPI POP PUSH1 0x0 PUSH2 0x202 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x1C2 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x263 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x1FF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT INVALID MSTORE8 PUSH2 0x6665 0x4D PUSH2 0x7468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F770000000F4240182F42 0x1E DUP5 DUP1 0x23 PUSH15 0x82771822AD63A2DC6C0305E8532B0 0x48 CALLVALUE 0xC9 PUSH8 0x36B3C23876D73A18 PUSH27 0x3B9D4A3D09003E5EA63FA0C540D17741F28843057D440BA7450629 GASLIMIT 0xF6 MUL CHAINID 0xDC LT SELFBALANCE 0xB9 OR 0x48 DUP14 0xC7 0x49 GAS 0xBA 0x4A KECCAK256 PUSH29 0x4ADF8A4B98544C4B404CF8AA4DA0E64E44434EE3054F7D6D5013B750A6 BYTE MLOAD CALLVALUE 0xC8 MLOAD 0xBF CREATE MSTORE SELFBALANCE 0xBD MSTORE 0xCC PC MSTORE8 0x4D 0xE7 MSTORE8 0xCC DUP14 SLOAD 0x48 PUSH10 0x54C19C55384255AC7556 0x1E POP JUMP DUP14 0xE9 JUMP 0xFB JUMPI JUMPI PUSH7 0xB057D00758376F PC SWAP13 STATICCALL MSIZE STOP 0xBA MSIZE PUSH3 0xBC59C3 SGT GAS 0x21 0xCA GAS PUSH31 0xF15ADA945B34BF5B8D805BE4DF5C3AEA5C8FA95CE3265D356C5D86835DD673 0x5E 0x25 GASLIMIT 0x5E PUSH20 0x5EBFAD5F0B525F55F75F9FA25FE85A60302460 PUSH24 0x860BD0A61023061467F6189FD61CCAE620E98624FBF6290 0x27 PUSH3 0xCFD563 0xE 0xCD PUSH4 0x4D12638A 0xA9 PUSH4 0xC7966403 0xDC PUSH5 0x3F7F647A82 PUSH5 0xB4E864EEB5 PUSH6 0x27EC65609065 SWAP9 LOG3 PUSH6 0xD02966072466 RETURNDATASIZE SWAP8 PUSH7 0x738566A8F066DD 0xDA PUSH8 0x12476746386779AF PUSH8 0xACAF67DF3A681152 PUSH9 0x42FA68743268A4FC68 0xD5 0x5C PUSH10 0x5536934E169640A6992 0xCF PUSH10 0xC13169EF326A1CD46A4A XOR PUSH11 0x76FF6AA38C6ACFC0A26469 PUSH17 0x6673582212204F905FE0579CAD7D46C7F4 0xE8 LT 0xE2 SHR 0xE5 PUSH27 0xB2A65919F34804A7C6C2BA21F5863164736F6C6343000704003300 ",
      "sourceMap": "745:1769:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "generatedSources": [],
      "immutableReferences": {},
      "linkReferences": {},
      "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x40 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x32EF283B EQ PUSH2 0x45 JUMPI DUP1 PUSH4 0xE3581B68 EQ PUSH2 0x74 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x62 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x91 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x62 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x107 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST PUSH1 0x3 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0xFB JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH2 0x1A0 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x180 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x284 PUSH2 0x180 SWAP2 CODECOPY DUP3 PUSH1 0xFF AND PUSH1 0x1 DUP8 SUB PUSH1 0x3 MUL ADD DUP2 MLOAD DUP2 LT PUSH2 0xD6 JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0xFF PUSH1 0x8 DUP5 MUL AND SHR SWAP3 SWAP1 SWAP3 OR SWAP2 POP PUSH1 0x1 ADD PUSH2 0x96 JUMP JUMPDEST POP PUSH1 0xE8 SHR SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x155 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x4E756D6265722063616E6E6F74206265207A65726F PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 EQ ISZERO PUSH2 0x16A JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x102 JUMP JUMPDEST JUMPDEST PUSH1 0x80 DUP4 GT ISZERO PUSH2 0x180 JUMPI PUSH1 0x1 SWAP3 DUP4 SHR SWAP3 ADD PUSH2 0x16B JUMP JUMPDEST PUSH2 0x19F PUSH2 0x18C DUP5 PUSH2 0x91 JUMP JUMPDEST PUSH2 0x199 DUP4 PUSH3 0xF4240 PUSH2 0x1A6 JUMP JUMPDEST SWAP1 PUSH2 0x208 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1B5 JUMPI POP PUSH1 0x0 PUSH2 0x202 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x1C2 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x263 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x1FF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT INVALID MSTORE8 PUSH2 0x6665 0x4D PUSH2 0x7468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F770000000F4240182F42 0x1E DUP5 DUP1 0x23 PUSH15 0x82771822AD63A2DC6C0305E8532B0 0x48 CALLVALUE 0xC9 PUSH8 0x36B3C23876D73A18 PUSH27 0x3B9D4A3D09003E5EA63FA0C540D17741F28843057D440BA7450629 GASLIMIT 0xF6 MUL CHAINID 0xDC LT SELFBALANCE 0xB9 OR 0x48 DUP14 0xC7 0x49 GAS 0xBA 0x4A KECCAK256 PUSH29 0x4ADF8A4B98544C4B404CF8AA4DA0E64E44434EE3054F7D6D5013B750A6 BYTE MLOAD CALLVALUE 0xC8 MLOAD 0xBF CREATE MSTORE SELFBALANCE 0xBD MSTORE 0xCC PC MSTORE8 0x4D 0xE7 MSTORE8 0xCC DUP14 SLOAD 0x48 PUSH10 0x54C19C55384255AC7556 0x1E POP JUMP DUP14 0xE9 JUMP 0xFB JUMPI JUMPI PUSH7 0xB057D00758376F PC SWAP13 STATICCALL MSIZE STOP 0xBA MSIZE PUSH3 0xBC59C3 SGT GAS 0x21 0xCA GAS PUSH31 0xF15ADA945B34BF5B8D805BE4DF5C3AEA5C8FA95CE3265D356C5D86835DD673 0x5E 0x25 GASLIMIT 0x5E PUSH20 0x5EBFAD5F0B525F55F75F9FA25FE85A60302460 PUSH24 0x860BD0A61023061467F6189FD61CCAE620E98624FBF6290 0x27 PUSH3 0xCFD563 0xE 0xCD PUSH4 0x4D12638A 0xA9 PUSH4 0xC7966403 0xDC PUSH5 0x3F7F647A82 PUSH5 0xB4E864EEB5 PUSH6 0x27EC65609065 SWAP9 LOG3 PUSH6 0xD02966072466 RETURNDATASIZE SWAP8 PUSH7 0x738566A8F066DD 0xDA PUSH8 0x12476746386779AF PUSH8 0xACAF67DF3A681152 PUSH9 0x42FA68743268A4FC68 0xD5 0x5C PUSH10 0x5536934E169640A6992 0xCF PUSH10 0xC13169EF326A1CD46A4A XOR PUSH11 0x76FF6AA38C6ACFC0A26469 PUSH17 0x6673582212204F905FE0579CAD7D46C7F4 0xE8 LT 0xE2 SHR 0xE5 PUSH27 0xB2A65919F34804A7C6C2BA21F5863164736F6C6343000704003300 ",
      "sourceMap": "745:1769:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2189:323;;;;;;;;;;;;;;;;-1:-1:-1;2189:323:1;;:::i;:::-;;;;;;;;;;;;;;;;1815:368;;;;;;;;;;;;;;;;-1:-1:-1;1815:368:1;;:::i;2189:323::-;2253:7;;;2299:166;2321:1;2317;:5;;;2299:166;;;2343:17;2363:16;;;;;;;;;;;;;;;;;2397:1;2380:18;;2388:1;2381:4;:8;2393:1;2380:14;:18;2363:36;;;;;;;;;;;;-1:-1:-1;;;;;;2363:36:1;2432:21;2451:1;2447:5;;2432:21;;2422:32;;;;;-1:-1:-1;2324:3:1;;2299:166;;;-1:-1:-1;2490:14:1;;;-1:-1:-1;2189:323:1;;;;:::o;1815:368::-;1877:7;1911:1;1904:4;:8;1896:42;;;;;-1:-1:-1;;;1896:42:1;;;;;;;;;;;;-1:-1:-1;;;1896:42:1;;;;;;;;;;;;;;;1948:15;1982:4;1990:1;1982:9;1978:23;;;2000:1;1993:8;;;;;1978:23;2012:86;2026:3;2019:4;:10;2012:86;;;2060:1;2052:9;;;;2075:12;2012:86;;;2114:62;2150:25;2170:4;2150:19;:25::i;:::-;2115:29;:7;2135;2115:11;:29::i;:::-;2114:35;;:62::i;:::-;2107:69;1815:368;-1:-1:-1;;;1815:368:1:o;2180:459:0:-;2238:7;2479:6;2475:45;;-1:-1:-1;2508:1:0;2501:8;;2475:45;2542:5;;;2546:1;2542;:5;:1;2565:5;;;;;:10;2557:56;;;;-1:-1:-1;;;2557:56:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2631:1;-1:-1:-1;2180:459:0;;;;;:::o;874:176::-;932:7;963:5;;;986:6;;;;978:46;;;;;-1:-1:-1;;;978:46:0;;;;;;;;;;;;;;;;;;;;;;;;;;"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "216200",
        "executionCost": "285",
        "totalCost": "216485"
      },
      "external": {
        "getLog2TableTimes1M(uint256)": "infinite",
        "log2ApproxTimes1M(uint256)": "infinite"
      }
    },
    "methodIdentifiers": {
      "getLog2TableTimes1M(uint256)": "32ef283b",
      "log2ApproxTimes1M(uint256)": "e3581b68"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"getLog2TableTimes1M\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"log2ApproxTimes1M\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"log2ApproxTimes1M(uint256)\":{\"params\":{\"_num\":\"number to take log2 * 1M of\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"log2ApproxTimes1M(uint256)\":{\"notice\":\"Approximates log2 * 1M\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CartesiMath.sol\":\"CartesiMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"contracts/CartesiMath.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title CartesiMath\\n/// @author Felipe Argento\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary CartesiMath {\\n    using SafeMath for uint256;\\n\\n    // mapping values are packed as bytes3 each\\n    // see test/TestCartesiMath.ts for decimal values\\n    bytes constant log2tableTimes1M =\\n        hex\\\"0000000F4240182F421E8480236E082771822AD63A2DC6C0305E8532B04834C96736B3C23876D73A187A3B9D4A3D09003E5EA63FA0C540D17741F28843057D440BA745062945F60246DC1047B917488DC7495ABA4A207C4ADF8A4B98544C4B404CF8AA4DA0E64E44434EE3054F7D6D5013B750A61A5134C851BFF05247BD52CC58534DE753CC8D54486954C19C55384255AC75561E50568DE956FB575766B057D00758376F589CFA5900BA5962BC59C3135A21CA5A7EF15ADA945B34BF5B8D805BE4DF5C3AEA5C8FA95CE3265D356C5D86835DD6735E25455E73005EBFAD5F0B525F55F75F9FA25FE85A60302460770860BD0A61023061467F6189FD61CCAE620E98624FBF62902762CFD5630ECD634D12638AA963C7966403DC643F7F647A8264B4E864EEB56527EC6560906598A365D029660724663D9766738566A8F066DDDA6712476746386779AF67ACAF67DF3A6811526842FA68743268A4FC68D55C6905536934E169640A6992CF69C13169EF326A1CD46A4A186A76FF6AA38C6ACFC0\\\";\\n\\n    /// @notice Approximates log2 * 1M\\n    /// @param _num number to take log2 * 1M of\\n    function log2ApproxTimes1M(uint256 _num) public pure returns (uint256) {\\n        require(_num > 0, \\\"Number cannot be zero\\\");\\n        uint256 leading = 0;\\n\\n        if (_num == 1) return 0;\\n\\n        while (_num > 128) {\\n            _num = _num >> 1;\\n            leading += 1;\\n        }\\n        return (leading.mul(uint256(1000000))).add(getLog2TableTimes1M(_num));\\n    }\\n\\n    function getLog2TableTimes1M(uint256 _num) public pure returns (uint256) {\\n        bytes3 result = 0;\\n        for (uint8 i = 0; i < 3; i++) {\\n            bytes3 tempResult = log2tableTimes1M[(_num - 1) * 3 + i];\\n            result = result | (tempResult >> (i * 8));\\n        }\\n\\n        return uint256(uint24(result));\\n    }\\n}\\n\",\"keccak256\":\"0x1ca861a5c4b91bc746e5fb4afcd9e4d154d0d5dcf104fd53fcb04d7ca4748015\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "log2ApproxTimes1M(uint256)": {
        "notice": "Approximates log2 * 1M"
      }
    },
    "version": 1
  }
}