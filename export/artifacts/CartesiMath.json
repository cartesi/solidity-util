{
  "contractName": "CartesiMath",
  "sourceName": "contracts/CartesiMath.sol",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_num",
          "type": "uint256"
        }
      ],
      "name": "clz",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_num",
          "type": "uint256"
        }
      ],
      "name": "ctz",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_num",
          "type": "uint256"
        }
      ],
      "name": "getLog2Floor",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_num",
          "type": "uint256"
        }
      ],
      "name": "getLog2TableTimes1M",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_num",
          "type": "uint256"
        }
      ],
      "name": "isPowerOf2",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_num",
          "type": "uint256"
        }
      ],
      "name": "log2ApproxTimes1M",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": "0x6107cd61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c806306c8e54b14610071578063296e7af81461009b57806330244f7a146100bc57806332ef283b146100cf578063d82ae4b1146100e2578063e3581b6814610105575b600080fd5b61008461007f366004610552565b610118565b60405160ff90911681526020015b60405180910390f35b6100ae6100a9366004610552565b610186565b604051908152602001610092565b6100ae6100ca366004610552565b610297565b6100ae6100dd366004610552565b6103bc565b6100f56100f0366004610552565b61047b565b6040519015158152602001610092565b6100ae610113366004610552565b61049e565b60008161016c5760405162461bcd60e51b815260206004820152601860248201527f6c6f67206f66207a65726f20697320756e646566696e6564000000000000000060448201526064015b60405180910390fd5b61017582610297565b6101809060ff6105ca565b92915050565b6000816101965750610100919050565b60006fffffffffffffffffffffffffffffffff83166101c4576101ba81608061056a565b9050608083901c92505b67ffffffffffffffff83166101e8576101de81604061056a565b9050604083901c92505b63ffffffff8316610208576101fe81602061056a565b9050602083901c92505b61ffff83166102265761021c81601061056a565b9050601083901c92505b60ff83166102435761023981600861056a565b9050600883901c92505b600f83166102605761025681600461056a565b9050600483901c92505b6003831661027d5761027381600261056a565b9050600283901c92505b600183166101805761029081600161056a565b9392505050565b6000816102a75750610100919050565b60006fffffffffffffffffffffffffffffffff1983166102d6576102cc81608061056a565b9050608083901b92505b6001600160c01b031983166102fa576102f081604061056a565b9050604083901b92505b6001600160e01b0319831661031e5761031481602061056a565b9050602083901b92505b6001600160f01b031983166103425761033881601061056a565b9050601083901b92505b6001600160f81b031983166103665761035c81600861056a565b9050600883901b92505b600f60fc1b83166103865761037c81600461056a565b9050600483901b92505b600360fe1b83166103a65761039c81600261056a565b9050600283901b92505b600160ff1b83166101805761029081600161056a565b600080805b60038160ff161015610471576000604051806101a001604052806101808152602001610618610180913960ff83166103fa6001886105ca565b610405906003610582565b61040f919061056a565b8151811061042d57634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b03191690506104498260086105a1565b60ff16816001600160e81b031916901c83179250508080610469906105e1565b9150506103c1565b5060e81c92915050565b60008161048a57506000919050565b6104956001836105ca565b90911615919050565b60008082116104e75760405162461bcd60e51b81526020600482015260156024820152744e756d6265722063616e6e6f74206265207a65726f60581b6044820152606401610163565b600082600114156104fb5750600092915050565b608083111561051b57600192831c92610514908261056a565b90506104fb565b610290610527846103bc565b61053483620f424061053a565b90610546565b60006102908284610582565b6000610290828461056a565b600060208284031215610563578081fd5b5035919050565b6000821982111561057d5761057d610601565b500190565b600081600019048311821515161561059c5761059c610601565b500290565b600060ff821660ff84168160ff04811182151516156105c2576105c2610601565b029392505050565b6000828210156105dc576105dc610601565b500390565b600060ff821660ff8114156105f8576105f8610601565b60010192915050565b634e487b7160e01b600052601160045260246000fdfe0000000f4240182f421e8480236e082771822ad63a2dc6c0305e8532b04834c96736b3c23876d73a187a3b9d4a3d09003e5ea63fa0c540d17741f28843057d440ba745062945f60246dc1047b917488dc7495aba4a207c4adf8a4b98544c4b404cf8aa4da0e64e44434ee3054f7d6d5013b750a61a5134c851bff05247bd52cc58534de753cc8d54486954c19c55384255ac75561e50568de956fb575766b057d00758376f589cfa5900ba5962bc59c3135a21ca5a7ef15ada945b34bf5b8d805be4df5c3aea5c8fa95ce3265d356c5d86835dd6735e25455e73005ebfad5f0b525f55f75f9fa25fe85a60302460770860bd0a61023061467f6189fd61ccae620e98624fbf62902762cfd5630ecd634d12638aa963c7966403dc643f7f647a8264b4e864eeb56527ec6560906598a365d029660724663d9766738566a8f066ddda6712476746386779af67acaf67df3a6811526842fa68743268a4fc68d55c6905536934e169640a6992cf69c13169ef326a1cd46a4a186a76ff6aa38c6acfc0a2646970667358221220fad68c76703bb9d664339b0203333ad91f40b10c0c119d7e36dd9e2c08c5a66464736f6c63430008040033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c806306c8e54b14610071578063296e7af81461009b57806330244f7a146100bc57806332ef283b146100cf578063d82ae4b1146100e2578063e3581b6814610105575b600080fd5b61008461007f366004610552565b610118565b60405160ff90911681526020015b60405180910390f35b6100ae6100a9366004610552565b610186565b604051908152602001610092565b6100ae6100ca366004610552565b610297565b6100ae6100dd366004610552565b6103bc565b6100f56100f0366004610552565b61047b565b6040519015158152602001610092565b6100ae610113366004610552565b61049e565b60008161016c5760405162461bcd60e51b815260206004820152601860248201527f6c6f67206f66207a65726f20697320756e646566696e6564000000000000000060448201526064015b60405180910390fd5b61017582610297565b6101809060ff6105ca565b92915050565b6000816101965750610100919050565b60006fffffffffffffffffffffffffffffffff83166101c4576101ba81608061056a565b9050608083901c92505b67ffffffffffffffff83166101e8576101de81604061056a565b9050604083901c92505b63ffffffff8316610208576101fe81602061056a565b9050602083901c92505b61ffff83166102265761021c81601061056a565b9050601083901c92505b60ff83166102435761023981600861056a565b9050600883901c92505b600f83166102605761025681600461056a565b9050600483901c92505b6003831661027d5761027381600261056a565b9050600283901c92505b600183166101805761029081600161056a565b9392505050565b6000816102a75750610100919050565b60006fffffffffffffffffffffffffffffffff1983166102d6576102cc81608061056a565b9050608083901b92505b6001600160c01b031983166102fa576102f081604061056a565b9050604083901b92505b6001600160e01b0319831661031e5761031481602061056a565b9050602083901b92505b6001600160f01b031983166103425761033881601061056a565b9050601083901b92505b6001600160f81b031983166103665761035c81600861056a565b9050600883901b92505b600f60fc1b83166103865761037c81600461056a565b9050600483901b92505b600360fe1b83166103a65761039c81600261056a565b9050600283901b92505b600160ff1b83166101805761029081600161056a565b600080805b60038160ff161015610471576000604051806101a001604052806101808152602001610618610180913960ff83166103fa6001886105ca565b610405906003610582565b61040f919061056a565b8151811061042d57634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b03191690506104498260086105a1565b60ff16816001600160e81b031916901c83179250508080610469906105e1565b9150506103c1565b5060e81c92915050565b60008161048a57506000919050565b6104956001836105ca565b90911615919050565b60008082116104e75760405162461bcd60e51b81526020600482015260156024820152744e756d6265722063616e6e6f74206265207a65726f60581b6044820152606401610163565b600082600114156104fb5750600092915050565b608083111561051b57600192831c92610514908261056a565b90506104fb565b610290610527846103bc565b61053483620f424061053a565b90610546565b60006102908284610582565b6000610290828461056a565b600060208284031215610563578081fd5b5035919050565b6000821982111561057d5761057d610601565b500190565b600081600019048311821515161561059c5761059c610601565b500290565b600060ff821660ff84168160ff04811182151516156105c2576105c2610601565b029392505050565b6000828210156105dc576105dc610601565b500390565b600060ff821660ff8114156105f8576105f8610601565b60010192915050565b634e487b7160e01b600052601160045260246000fdfe0000000f4240182f421e8480236e082771822ad63a2dc6c0305e8532b04834c96736b3c23876d73a187a3b9d4a3d09003e5ea63fa0c540d17741f28843057d440ba745062945f60246dc1047b917488dc7495aba4a207c4adf8a4b98544c4b404cf8aa4da0e64e44434ee3054f7d6d5013b750a61a5134c851bff05247bd52cc58534de753cc8d54486954c19c55384255ac75561e50568de956fb575766b057d00758376f589cfa5900ba5962bc59c3135a21ca5a7ef15ada945b34bf5b8d805be4df5c3aea5c8fa95ce3265d356c5d86835dd6735e25455e73005ebfad5f0b525f55f75f9fa25fe85a60302460770860bd0a61023061467f6189fd61ccae620e98624fbf62902762cfd5630ecd634d12638aa963c7966403dc643f7f647a8264b4e864eeb56527ec6560906598a365d029660724663d9766738566a8f066ddda6712476746386779af67acaf67df3a6811526842fa68743268a4fc68d55c6905536934e169640a6992cf69c13169ef326a1cd46a4a186a76ff6aa38c6acfc0a2646970667358221220fad68c76703bb9d664339b0203333ad91f40b10c0c119d7e36dd9e2c08c5a66464736f6c63430008040033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "clz(uint256)": {
        "details": "this a binary search implementation",
        "params": {
          "_num": "number you want the clz of"
        }
      },
      "ctz(uint256)": {
        "details": "this a binary search implementation",
        "params": {
          "_num": "number you want the ctz of"
        }
      },
      "getLog2Floor(uint256)": {
        "params": {
          "_num": "number to take floor(log2) of"
        },
        "returns": {
          "_0": "floor(log2) of _num"
        }
      },
      "getLog2TableTimes1M(uint256)": {
        "params": {
          "_num": "number to take log2 of"
        },
        "returns": {
          "_0": "result after table look-up"
        }
      },
      "isPowerOf2(uint256)": {
        "params": {
          "_num": "number to check"
        },
        "returns": {
          "_0": "true if number is power of 2, false if not"
        }
      },
      "log2ApproxTimes1M(uint256)": {
        "params": {
          "_num": "number to take log2 * 1M of"
        },
        "returns": {
          "_0": "approximate log2 times 1M"
        }
      }
    },
    "version": 1
  },
  "evm": {
    "bytecode": {
      "generatedSources": [],
      "linkReferences": {},
      "opcodes": "PUSH2 0x7CD PUSH2 0x3A PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x2D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x6C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6C8E54B EQ PUSH2 0x71 JUMPI DUP1 PUSH4 0x296E7AF8 EQ PUSH2 0x9B JUMPI DUP1 PUSH4 0x30244F7A EQ PUSH2 0xBC JUMPI DUP1 PUSH4 0x32EF283B EQ PUSH2 0xCF JUMPI DUP1 PUSH4 0xD82AE4B1 EQ PUSH2 0xE2 JUMPI DUP1 PUSH4 0xE3581B68 EQ PUSH2 0x105 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x84 PUSH2 0x7F CALLDATASIZE PUSH1 0x4 PUSH2 0x552 JUMP JUMPDEST PUSH2 0x118 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAE PUSH2 0xA9 CALLDATASIZE PUSH1 0x4 PUSH2 0x552 JUMP JUMPDEST PUSH2 0x186 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x92 JUMP JUMPDEST PUSH2 0xAE PUSH2 0xCA CALLDATASIZE PUSH1 0x4 PUSH2 0x552 JUMP JUMPDEST PUSH2 0x297 JUMP JUMPDEST PUSH2 0xAE PUSH2 0xDD CALLDATASIZE PUSH1 0x4 PUSH2 0x552 JUMP JUMPDEST PUSH2 0x3BC JUMP JUMPDEST PUSH2 0xF5 PUSH2 0xF0 CALLDATASIZE PUSH1 0x4 PUSH2 0x552 JUMP JUMPDEST PUSH2 0x47B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x92 JUMP JUMPDEST PUSH2 0xAE PUSH2 0x113 CALLDATASIZE PUSH1 0x4 PUSH2 0x552 JUMP JUMPDEST PUSH2 0x49E JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x16C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6C6F67206F66207A65726F20697320756E646566696E65640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x175 DUP3 PUSH2 0x297 JUMP JUMPDEST PUSH2 0x180 SWAP1 PUSH1 0xFF PUSH2 0x5CA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x196 JUMPI POP PUSH2 0x100 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x1C4 JUMPI PUSH2 0x1BA DUP2 PUSH1 0x80 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x80 DUP4 SWAP1 SHR SWAP3 POP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x1E8 JUMPI PUSH2 0x1DE DUP2 PUSH1 0x40 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x40 DUP4 SWAP1 SHR SWAP3 POP JUMPDEST PUSH4 0xFFFFFFFF DUP4 AND PUSH2 0x208 JUMPI PUSH2 0x1FE DUP2 PUSH1 0x20 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP4 SWAP1 SHR SWAP3 POP JUMPDEST PUSH2 0xFFFF DUP4 AND PUSH2 0x226 JUMPI PUSH2 0x21C DUP2 PUSH1 0x10 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x10 DUP4 SWAP1 SHR SWAP3 POP JUMPDEST PUSH1 0xFF DUP4 AND PUSH2 0x243 JUMPI PUSH2 0x239 DUP2 PUSH1 0x8 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x8 DUP4 SWAP1 SHR SWAP3 POP JUMPDEST PUSH1 0xF DUP4 AND PUSH2 0x260 JUMPI PUSH2 0x256 DUP2 PUSH1 0x4 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x4 DUP4 SWAP1 SHR SWAP3 POP JUMPDEST PUSH1 0x3 DUP4 AND PUSH2 0x27D JUMPI PUSH2 0x273 DUP2 PUSH1 0x2 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP4 SWAP1 SHR SWAP3 POP JUMPDEST PUSH1 0x1 DUP4 AND PUSH2 0x180 JUMPI PUSH2 0x290 DUP2 PUSH1 0x1 PUSH2 0x56A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2A7 JUMPI POP PUSH2 0x100 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND PUSH2 0x2D6 JUMPI PUSH2 0x2CC DUP2 PUSH1 0x80 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x80 DUP4 SWAP1 SHL SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT DUP4 AND PUSH2 0x2FA JUMPI PUSH2 0x2F0 DUP2 PUSH1 0x40 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x40 DUP4 SWAP1 SHL SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH2 0x31E JUMPI PUSH2 0x314 DUP2 PUSH1 0x20 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP4 SWAP1 SHL SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT DUP4 AND PUSH2 0x342 JUMPI PUSH2 0x338 DUP2 PUSH1 0x10 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x10 DUP4 SWAP1 SHL SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP4 AND PUSH2 0x366 JUMPI PUSH2 0x35C DUP2 PUSH1 0x8 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x8 DUP4 SWAP1 SHL SWAP3 POP JUMPDEST PUSH1 0xF PUSH1 0xFC SHL DUP4 AND PUSH2 0x386 JUMPI PUSH2 0x37C DUP2 PUSH1 0x4 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x4 DUP4 SWAP1 SHL SWAP3 POP JUMPDEST PUSH1 0x3 PUSH1 0xFE SHL DUP4 AND PUSH2 0x3A6 JUMPI PUSH2 0x39C DUP2 PUSH1 0x2 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP4 SWAP1 SHL SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0xFF SHL DUP4 AND PUSH2 0x180 JUMPI PUSH2 0x290 DUP2 PUSH1 0x1 PUSH2 0x56A JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST PUSH1 0x3 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x471 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH2 0x1A0 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x180 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x618 PUSH2 0x180 SWAP2 CODECOPY PUSH1 0xFF DUP4 AND PUSH2 0x3FA PUSH1 0x1 DUP9 PUSH2 0x5CA JUMP JUMPDEST PUSH2 0x405 SWAP1 PUSH1 0x3 PUSH2 0x582 JUMP JUMPDEST PUSH2 0x40F SWAP2 SWAP1 PUSH2 0x56A JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x42D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 POP PUSH2 0x449 DUP3 PUSH1 0x8 PUSH2 0x5A1 JUMP JUMPDEST PUSH1 0xFF AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE8 SHL SUB NOT AND SWAP1 SHR DUP4 OR SWAP3 POP POP DUP1 DUP1 PUSH2 0x469 SWAP1 PUSH2 0x5E1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3C1 JUMP JUMPDEST POP PUSH1 0xE8 SHR SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x48A JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x495 PUSH1 0x1 DUP4 PUSH2 0x5CA JUMP JUMPDEST SWAP1 SWAP2 AND ISZERO SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x4E7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x4E756D6265722063616E6E6F74206265207A65726F PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x163 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 EQ ISZERO PUSH2 0x4FB JUMPI POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 DUP4 GT ISZERO PUSH2 0x51B JUMPI PUSH1 0x1 SWAP3 DUP4 SHR SWAP3 PUSH2 0x514 SWAP1 DUP3 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH2 0x4FB JUMP JUMPDEST PUSH2 0x290 PUSH2 0x527 DUP5 PUSH2 0x3BC JUMP JUMPDEST PUSH2 0x534 DUP4 PUSH3 0xF4240 PUSH2 0x53A JUMP JUMPDEST SWAP1 PUSH2 0x546 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x290 DUP3 DUP5 PUSH2 0x582 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x290 DUP3 DUP5 PUSH2 0x56A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x563 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x57D JUMPI PUSH2 0x57D PUSH2 0x601 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x59C JUMPI PUSH2 0x59C PUSH2 0x601 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP5 AND DUP2 PUSH1 0xFF DIV DUP2 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x5C2 JUMPI PUSH2 0x5C2 PUSH2 0x601 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x5DC JUMPI PUSH2 0x5DC PUSH2 0x601 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 EQ ISZERO PUSH2 0x5F8 JUMPI PUSH2 0x5F8 PUSH2 0x601 JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID STOP STOP STOP 0xF TIMESTAMP BLOCKHASH XOR 0x2F TIMESTAMP 0x1E DUP5 DUP1 0x23 PUSH15 0x82771822AD63A2DC6C0305E8532B0 0x48 CALLVALUE 0xC9 PUSH8 0x36B3C23876D73A18 PUSH27 0x3B9D4A3D09003E5EA63FA0C540D17741F28843057D440BA7450629 GASLIMIT 0xF6 MUL CHAINID 0xDC LT SELFBALANCE 0xB9 OR 0x48 DUP14 0xC7 0x49 GAS 0xBA 0x4A KECCAK256 PUSH29 0x4ADF8A4B98544C4B404CF8AA4DA0E64E44434EE3054F7D6D5013B750A6 BYTE MLOAD CALLVALUE 0xC8 MLOAD 0xBF CREATE MSTORE SELFBALANCE 0xBD MSTORE 0xCC PC MSTORE8 0x4D 0xE7 MSTORE8 0xCC DUP14 SLOAD 0x48 PUSH10 0x54C19C55384255AC7556 0x1E POP JUMP DUP14 0xE9 JUMP 0xFB JUMPI JUMPI PUSH7 0xB057D00758376F PC SWAP13 STATICCALL MSIZE STOP 0xBA MSIZE PUSH3 0xBC59C3 SGT GAS 0x21 0xCA GAS PUSH31 0xF15ADA945B34BF5B8D805BE4DF5C3AEA5C8FA95CE3265D356C5D86835DD673 0x5E 0x25 GASLIMIT 0x5E PUSH20 0x5EBFAD5F0B525F55F75F9FA25FE85A60302460 PUSH24 0x860BD0A61023061467F6189FD61CCAE620E98624FBF6290 0x27 PUSH3 0xCFD563 0xE 0xCD PUSH4 0x4D12638A 0xA9 PUSH4 0xC7966403 0xDC PUSH5 0x3F7F647A82 PUSH5 0xB4E864EEB5 PUSH6 0x27EC65609065 SWAP9 LOG3 PUSH6 0xD02966072466 RETURNDATASIZE SWAP8 PUSH7 0x738566A8F066DD 0xDA PUSH8 0x12476746386779AF PUSH8 0xACAF67DF3A681152 PUSH9 0x42FA68743268A4FC68 0xD5 0x5C PUSH10 0x5536934E169640A6992 0xCF PUSH10 0xC13169EF326A1CD46A4A XOR PUSH11 0x76FF6AA38C6ACFC0A26469 PUSH17 0x667358221220FAD68C76703BB9D664339B MUL SUB CALLER GASPRICE 0xD9 0x1F BLOCKHASH 0xB1 0xC 0xC GT SWAP14 PUSH31 0x36DD9E2C08C5A66464736F6C63430008040033000000000000000000000000 ",
      "sourceMap": "751:5094:1:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;751:5094:1;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:2487:5",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:5",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "84:120:5",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "130:26:5",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "139:6:5"
                                },
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "147:6:5"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "132:6:5"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "132:22:5"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "132:22:5"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "105:7:5"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "114:9:5"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "101:3:5"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "101:23:5"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "126:2:5",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "97:3:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "97:32:5"
                      },
                      "nodeType": "YulIf",
                      "src": "94:2:5"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "165:33:5",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "188:9:5"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "175:12:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "175:23:5"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "165:6:5"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "50:9:5",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "61:7:5",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "73:6:5",
                    "type": ""
                  }
                ],
                "src": "14:190:5"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "312:92:5",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "322:26:5",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "334:9:5"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "345:2:5",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "330:3:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "330:18:5"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "322:4:5"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "364:9:5"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "389:6:5"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "382:6:5"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "382:14:5"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "375:6:5"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "375:22:5"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "357:6:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "357:41:5"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "357:41:5"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_library_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "281:9:5",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "292:6:5",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "303:4:5",
                    "type": ""
                  }
                ],
                "src": "209:195:5"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "583:171:5",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "600:9:5"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "611:2:5",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "593:6:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "593:21:5"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "593:21:5"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "634:9:5"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "645:2:5",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "630:3:5"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "630:18:5"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "650:2:5",
                            "type": "",
                            "value": "21"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "623:6:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "623:30:5"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "623:30:5"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "673:9:5"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "684:2:5",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "669:3:5"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "669:18:5"
                          },
                          {
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "689:23:5",
                            "type": "",
                            "value": "Number cannot be zero"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "662:6:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "662:51:5"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "662:51:5"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "722:26:5",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "734:9:5"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "745:2:5",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "730:3:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "730:18:5"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "722:4:5"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_e1fbd951d5487d04bbc1d9481d2c40637c481da5acb7e682a765b2f4ae6d6a36__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "560:9:5",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "574:4:5",
                    "type": ""
                  }
                ],
                "src": "409:345:5"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "933:174:5",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "950:9:5"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "961:2:5",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "943:6:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "943:21:5"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "943:21:5"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "984:9:5"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "995:2:5",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "980:3:5"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "980:18:5"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1000:2:5",
                            "type": "",
                            "value": "24"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "973:6:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "973:30:5"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "973:30:5"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1023:9:5"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1034:2:5",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1019:3:5"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1019:18:5"
                          },
                          {
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "1039:26:5",
                            "type": "",
                            "value": "log of zero is undefined"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1012:6:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1012:54:5"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1012:54:5"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1075:26:5",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1087:9:5"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1098:2:5",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1083:3:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1083:18:5"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1075:4:5"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_e6be4237d74238858698f26a277539df6c687a81d412e8b3bdd07e355590dc61__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "910:9:5",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "924:4:5",
                    "type": ""
                  }
                ],
                "src": "759:348:5"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1221:76:5",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1231:26:5",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1243:9:5"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1254:2:5",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1239:3:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1239:18:5"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1231:4:5"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1273:9:5"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "1284:6:5"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1266:6:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1266:25:5"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1266:25:5"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1190:9:5",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1201:6:5",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1212:4:5",
                    "type": ""
                  }
                ],
                "src": "1112:185:5"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1407:87:5",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1417:26:5",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1429:9:5"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1440:2:5",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1425:3:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1425:18:5"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1417:4:5"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1459:9:5"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1474:6:5"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1482:4:5",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1470:3:5"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1470:17:5"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1452:6:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1452:36:5"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1452:36:5"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_library_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1376:9:5",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1387:6:5",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1398:4:5",
                    "type": ""
                  }
                ],
                "src": "1302:192:5"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1547:80:5",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1574:22:5",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "1576:16:5"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1576:18:5"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1576:18:5"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "1563:1:5"
                          },
                          {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "1570:1:5"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "1566:3:5"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1566:6:5"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "1560:2:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1560:13:5"
                      },
                      "nodeType": "YulIf",
                      "src": "1557:2:5"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1605:16:5",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "1616:1:5"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "1619:1:5"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1612:3:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1612:9:5"
                      },
                      "variableNames": [
                        {
                          "name": "sum",
                          "nodeType": "YulIdentifier",
                          "src": "1605:3:5"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_add_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "1530:1:5",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "1533:1:5",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "sum",
                    "nodeType": "YulTypedName",
                    "src": "1539:3:5",
                    "type": ""
                  }
                ],
                "src": "1499:128:5"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1684:116:5",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1743:22:5",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "1745:16:5"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1745:18:5"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1745:18:5"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "1715:1:5"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "1708:6:5"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1708:9:5"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1701:6:5"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1701:17:5"
                          },
                          {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "1723:1:5"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1734:1:5",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "1730:3:5"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1730:6:5"
                                  },
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "1738:1:5"
                                  }
                                ],
                                "functionName": {
                                  "name": "div",
                                  "nodeType": "YulIdentifier",
                                  "src": "1726:3:5"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1726:14:5"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1720:2:5"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1720:21:5"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "1697:3:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1697:45:5"
                      },
                      "nodeType": "YulIf",
                      "src": "1694:2:5"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1774:20:5",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "1789:1:5"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "1792:1:5"
                          }
                        ],
                        "functionName": {
                          "name": "mul",
                          "nodeType": "YulIdentifier",
                          "src": "1785:3:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1785:9:5"
                      },
                      "variableNames": [
                        {
                          "name": "product",
                          "nodeType": "YulIdentifier",
                          "src": "1774:7:5"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_mul_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "1663:1:5",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "1666:1:5",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "product",
                    "nodeType": "YulTypedName",
                    "src": "1672:7:5",
                    "type": ""
                  }
                ],
                "src": "1632:168:5"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1855:188:5",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1865:23:5",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "1880:1:5"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1883:4:5",
                            "type": "",
                            "value": "0xff"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "1876:3:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1876:12:5"
                      },
                      "variables": [
                        {
                          "name": "x_1",
                          "nodeType": "YulTypedName",
                          "src": "1869:3:5",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1897:23:5",
                      "value": {
                        "arguments": [
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "1912:1:5"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1915:4:5",
                            "type": "",
                            "value": "0xff"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "1908:3:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1908:12:5"
                      },
                      "variables": [
                        {
                          "name": "y_1",
                          "nodeType": "YulTypedName",
                          "src": "1901:3:5",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1982:22:5",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "1984:16:5"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1984:18:5"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1984:18:5"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1950:3:5"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "1943:6:5"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1943:11:5"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1936:6:5"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1936:19:5"
                          },
                          {
                            "arguments": [
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "1960:3:5"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1969:4:5",
                                    "type": "",
                                    "value": "0xff"
                                  },
                                  {
                                    "name": "x_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1975:3:5"
                                  }
                                ],
                                "functionName": {
                                  "name": "div",
                                  "nodeType": "YulIdentifier",
                                  "src": "1965:3:5"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1965:14:5"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1957:2:5"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1957:23:5"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "1932:3:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1932:49:5"
                      },
                      "nodeType": "YulIf",
                      "src": "1929:2:5"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2013:24:5",
                      "value": {
                        "arguments": [
                          {
                            "name": "x_1",
                            "nodeType": "YulIdentifier",
                            "src": "2028:3:5"
                          },
                          {
                            "name": "y_1",
                            "nodeType": "YulIdentifier",
                            "src": "2033:3:5"
                          }
                        ],
                        "functionName": {
                          "name": "mul",
                          "nodeType": "YulIdentifier",
                          "src": "2024:3:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2024:13:5"
                      },
                      "variableNames": [
                        {
                          "name": "product",
                          "nodeType": "YulIdentifier",
                          "src": "2013:7:5"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_mul_t_uint8",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "1834:1:5",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "1837:1:5",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "product",
                    "nodeType": "YulTypedName",
                    "src": "1843:7:5",
                    "type": ""
                  }
                ],
                "src": "1805:238:5"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2097:76:5",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2119:22:5",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "2121:16:5"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2121:18:5"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2121:18:5"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "2113:1:5"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "2116:1:5"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "2110:2:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2110:8:5"
                      },
                      "nodeType": "YulIf",
                      "src": "2107:2:5"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2150:17:5",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "2162:1:5"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "2165:1:5"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "2158:3:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2158:9:5"
                      },
                      "variableNames": [
                        {
                          "name": "diff",
                          "nodeType": "YulIdentifier",
                          "src": "2150:4:5"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_sub_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "2079:1:5",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "2082:1:5",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "diff",
                    "nodeType": "YulTypedName",
                    "src": "2088:4:5",
                    "type": ""
                  }
                ],
                "src": "2048:125:5"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2223:130:5",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2233:31:5",
                      "value": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2252:5:5"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2259:4:5",
                            "type": "",
                            "value": "0xff"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "2248:3:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2248:16:5"
                      },
                      "variables": [
                        {
                          "name": "value_1",
                          "nodeType": "YulTypedName",
                          "src": "2237:7:5",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2294:22:5",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "2296:16:5"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2296:18:5"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2296:18:5"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "2279:7:5"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2288:4:5",
                            "type": "",
                            "value": "0xff"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "2276:2:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2276:17:5"
                      },
                      "nodeType": "YulIf",
                      "src": "2273:2:5"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2325:22:5",
                      "value": {
                        "arguments": [
                          {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "2336:7:5"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2345:1:5",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2332:3:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2332:15:5"
                      },
                      "variableNames": [
                        {
                          "name": "ret",
                          "nodeType": "YulIdentifier",
                          "src": "2325:3:5"
                        }
                      ]
                    }
                  ]
                },
                "name": "increment_t_uint8",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "2205:5:5",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "ret",
                    "nodeType": "YulTypedName",
                    "src": "2215:3:5",
                    "type": ""
                  }
                ],
                "src": "2178:175:5"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2390:95:5",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2407:1:5",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2414:3:5",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2419:10:5",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "2410:3:5"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2410:20:5"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2400:6:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2400:31:5"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2400:31:5"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2447:1:5",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2450:4:5",
                            "type": "",
                            "value": "0x11"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2440:6:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2440:15:5"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2440:15:5"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2471:1:5",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2474:4:5",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "2464:6:5"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2464:15:5"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2464:15:5"
                    }
                  ]
                },
                "name": "panic_error_0x11",
                "nodeType": "YulFunctionDefinition",
                "src": "2358:127:5"
              }
            ]
          },
          "contents": "{\n    { }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_stringliteral_e1fbd951d5487d04bbc1d9481d2c40637c481da5acb7e682a765b2f4ae6d6a36__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Number cannot be zero\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e6be4237d74238858698f26a277539df6c687a81d412e8b3bdd07e355590dc61__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"log of zero is undefined\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_mul_t_uint8(x, y) -> product\n    {\n        let x_1 := and(x, 0xff)\n        let y_1 := and(y, 0xff)\n        if and(iszero(iszero(x_1)), gt(y_1, div(0xff, x_1))) { panic_error_0x11() }\n        product := mul(x_1, y_1)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function increment_t_uint8(value) -> ret\n    {\n        let value_1 := and(value, 0xff)\n        if eq(value_1, 0xff) { panic_error_0x11() }\n        ret := add(value_1, 1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n}",
          "id": 5,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "immutableReferences": {},
      "linkReferences": {},
      "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x6C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6C8E54B EQ PUSH2 0x71 JUMPI DUP1 PUSH4 0x296E7AF8 EQ PUSH2 0x9B JUMPI DUP1 PUSH4 0x30244F7A EQ PUSH2 0xBC JUMPI DUP1 PUSH4 0x32EF283B EQ PUSH2 0xCF JUMPI DUP1 PUSH4 0xD82AE4B1 EQ PUSH2 0xE2 JUMPI DUP1 PUSH4 0xE3581B68 EQ PUSH2 0x105 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x84 PUSH2 0x7F CALLDATASIZE PUSH1 0x4 PUSH2 0x552 JUMP JUMPDEST PUSH2 0x118 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAE PUSH2 0xA9 CALLDATASIZE PUSH1 0x4 PUSH2 0x552 JUMP JUMPDEST PUSH2 0x186 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x92 JUMP JUMPDEST PUSH2 0xAE PUSH2 0xCA CALLDATASIZE PUSH1 0x4 PUSH2 0x552 JUMP JUMPDEST PUSH2 0x297 JUMP JUMPDEST PUSH2 0xAE PUSH2 0xDD CALLDATASIZE PUSH1 0x4 PUSH2 0x552 JUMP JUMPDEST PUSH2 0x3BC JUMP JUMPDEST PUSH2 0xF5 PUSH2 0xF0 CALLDATASIZE PUSH1 0x4 PUSH2 0x552 JUMP JUMPDEST PUSH2 0x47B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x92 JUMP JUMPDEST PUSH2 0xAE PUSH2 0x113 CALLDATASIZE PUSH1 0x4 PUSH2 0x552 JUMP JUMPDEST PUSH2 0x49E JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x16C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6C6F67206F66207A65726F20697320756E646566696E65640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x175 DUP3 PUSH2 0x297 JUMP JUMPDEST PUSH2 0x180 SWAP1 PUSH1 0xFF PUSH2 0x5CA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x196 JUMPI POP PUSH2 0x100 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x1C4 JUMPI PUSH2 0x1BA DUP2 PUSH1 0x80 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x80 DUP4 SWAP1 SHR SWAP3 POP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x1E8 JUMPI PUSH2 0x1DE DUP2 PUSH1 0x40 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x40 DUP4 SWAP1 SHR SWAP3 POP JUMPDEST PUSH4 0xFFFFFFFF DUP4 AND PUSH2 0x208 JUMPI PUSH2 0x1FE DUP2 PUSH1 0x20 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP4 SWAP1 SHR SWAP3 POP JUMPDEST PUSH2 0xFFFF DUP4 AND PUSH2 0x226 JUMPI PUSH2 0x21C DUP2 PUSH1 0x10 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x10 DUP4 SWAP1 SHR SWAP3 POP JUMPDEST PUSH1 0xFF DUP4 AND PUSH2 0x243 JUMPI PUSH2 0x239 DUP2 PUSH1 0x8 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x8 DUP4 SWAP1 SHR SWAP3 POP JUMPDEST PUSH1 0xF DUP4 AND PUSH2 0x260 JUMPI PUSH2 0x256 DUP2 PUSH1 0x4 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x4 DUP4 SWAP1 SHR SWAP3 POP JUMPDEST PUSH1 0x3 DUP4 AND PUSH2 0x27D JUMPI PUSH2 0x273 DUP2 PUSH1 0x2 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP4 SWAP1 SHR SWAP3 POP JUMPDEST PUSH1 0x1 DUP4 AND PUSH2 0x180 JUMPI PUSH2 0x290 DUP2 PUSH1 0x1 PUSH2 0x56A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2A7 JUMPI POP PUSH2 0x100 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP4 AND PUSH2 0x2D6 JUMPI PUSH2 0x2CC DUP2 PUSH1 0x80 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x80 DUP4 SWAP1 SHL SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT DUP4 AND PUSH2 0x2FA JUMPI PUSH2 0x2F0 DUP2 PUSH1 0x40 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x40 DUP4 SWAP1 SHL SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND PUSH2 0x31E JUMPI PUSH2 0x314 DUP2 PUSH1 0x20 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP4 SWAP1 SHL SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xF0 SHL SUB NOT DUP4 AND PUSH2 0x342 JUMPI PUSH2 0x338 DUP2 PUSH1 0x10 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x10 DUP4 SWAP1 SHL SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP4 AND PUSH2 0x366 JUMPI PUSH2 0x35C DUP2 PUSH1 0x8 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x8 DUP4 SWAP1 SHL SWAP3 POP JUMPDEST PUSH1 0xF PUSH1 0xFC SHL DUP4 AND PUSH2 0x386 JUMPI PUSH2 0x37C DUP2 PUSH1 0x4 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x4 DUP4 SWAP1 SHL SWAP3 POP JUMPDEST PUSH1 0x3 PUSH1 0xFE SHL DUP4 AND PUSH2 0x3A6 JUMPI PUSH2 0x39C DUP2 PUSH1 0x2 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP4 SWAP1 SHL SWAP3 POP JUMPDEST PUSH1 0x1 PUSH1 0xFF SHL DUP4 AND PUSH2 0x180 JUMPI PUSH2 0x290 DUP2 PUSH1 0x1 PUSH2 0x56A JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST PUSH1 0x3 DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x471 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH2 0x1A0 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x180 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x618 PUSH2 0x180 SWAP2 CODECOPY PUSH1 0xFF DUP4 AND PUSH2 0x3FA PUSH1 0x1 DUP9 PUSH2 0x5CA JUMP JUMPDEST PUSH2 0x405 SWAP1 PUSH1 0x3 PUSH2 0x582 JUMP JUMPDEST PUSH2 0x40F SWAP2 SWAP1 PUSH2 0x56A JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x42D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 POP PUSH2 0x449 DUP3 PUSH1 0x8 PUSH2 0x5A1 JUMP JUMPDEST PUSH1 0xFF AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE8 SHL SUB NOT AND SWAP1 SHR DUP4 OR SWAP3 POP POP DUP1 DUP1 PUSH2 0x469 SWAP1 PUSH2 0x5E1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3C1 JUMP JUMPDEST POP PUSH1 0xE8 SHR SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x48A JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x495 PUSH1 0x1 DUP4 PUSH2 0x5CA JUMP JUMPDEST SWAP1 SWAP2 AND ISZERO SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x4E7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x4E756D6265722063616E6E6F74206265207A65726F PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x163 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 EQ ISZERO PUSH2 0x4FB JUMPI POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 DUP4 GT ISZERO PUSH2 0x51B JUMPI PUSH1 0x1 SWAP3 DUP4 SHR SWAP3 PUSH2 0x514 SWAP1 DUP3 PUSH2 0x56A JUMP JUMPDEST SWAP1 POP PUSH2 0x4FB JUMP JUMPDEST PUSH2 0x290 PUSH2 0x527 DUP5 PUSH2 0x3BC JUMP JUMPDEST PUSH2 0x534 DUP4 PUSH3 0xF4240 PUSH2 0x53A JUMP JUMPDEST SWAP1 PUSH2 0x546 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x290 DUP3 DUP5 PUSH2 0x582 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x290 DUP3 DUP5 PUSH2 0x56A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x563 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x57D JUMPI PUSH2 0x57D PUSH2 0x601 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x59C JUMPI PUSH2 0x59C PUSH2 0x601 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP5 AND DUP2 PUSH1 0xFF DIV DUP2 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x5C2 JUMPI PUSH2 0x5C2 PUSH2 0x601 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x5DC JUMPI PUSH2 0x5DC PUSH2 0x601 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 EQ ISZERO PUSH2 0x5F8 JUMPI PUSH2 0x5F8 PUSH2 0x601 JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID STOP STOP STOP 0xF TIMESTAMP BLOCKHASH XOR 0x2F TIMESTAMP 0x1E DUP5 DUP1 0x23 PUSH15 0x82771822AD63A2DC6C0305E8532B0 0x48 CALLVALUE 0xC9 PUSH8 0x36B3C23876D73A18 PUSH27 0x3B9D4A3D09003E5EA63FA0C540D17741F28843057D440BA7450629 GASLIMIT 0xF6 MUL CHAINID 0xDC LT SELFBALANCE 0xB9 OR 0x48 DUP14 0xC7 0x49 GAS 0xBA 0x4A KECCAK256 PUSH29 0x4ADF8A4B98544C4B404CF8AA4DA0E64E44434EE3054F7D6D5013B750A6 BYTE MLOAD CALLVALUE 0xC8 MLOAD 0xBF CREATE MSTORE SELFBALANCE 0xBD MSTORE 0xCC PC MSTORE8 0x4D 0xE7 MSTORE8 0xCC DUP14 SLOAD 0x48 PUSH10 0x54C19C55384255AC7556 0x1E POP JUMP DUP14 0xE9 JUMP 0xFB JUMPI JUMPI PUSH7 0xB057D00758376F PC SWAP13 STATICCALL MSIZE STOP 0xBA MSIZE PUSH3 0xBC59C3 SGT GAS 0x21 0xCA GAS PUSH31 0xF15ADA945B34BF5B8D805BE4DF5C3AEA5C8FA95CE3265D356C5D86835DD673 0x5E 0x25 GASLIMIT 0x5E PUSH20 0x5EBFAD5F0B525F55F75F9FA25FE85A60302460 PUSH24 0x860BD0A61023061467F6189FD61CCAE620E98624FBF6290 0x27 PUSH3 0xCFD563 0xE 0xCD PUSH4 0x4D12638A 0xA9 PUSH4 0xC7966403 0xDC PUSH5 0x3F7F647A82 PUSH5 0xB4E864EEB5 PUSH6 0x27EC65609065 SWAP9 LOG3 PUSH6 0xD02966072466 RETURNDATASIZE SWAP8 PUSH7 0x738566A8F066DD 0xDA PUSH8 0x12476746386779AF PUSH8 0xACAF67DF3A681152 PUSH9 0x42FA68743268A4FC68 0xD5 0x5C PUSH10 0x5536934E169640A6992 0xCF PUSH10 0xC13169EF326A1CD46A4A XOR PUSH11 0x76FF6AA38C6ACFC0A26469 PUSH17 0x667358221220FAD68C76703BB9D664339B MUL SUB CALLER GASPRICE 0xD9 0x1F BLOCKHASH 0xB1 0xC 0xC GT SWAP14 PUSH31 0x36DD9E2C08C5A66464736F6C63430008040033000000000000000000000000 ",
      "sourceMap": "751:5094:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2824:165;;;;;;:::i;:::-;;:::i;:::-;;;1482:4:5;1470:17;;;1452:36;;1440:2;1425:18;2824:165:1;;;;;;;;3423:1141;;;;;;:::i;:::-;;:::i;:::-;;;1266:25:5;;;1254:2;1239:18;3423:1141:1;1221:76:5;4702:1141:1;;;;;;:::i;:::-;;:::i;2366:323::-;;;;;;:::i;:::-;;:::i;3139:145::-;;;;;;:::i;:::-;;:::i;:::-;;;382:14:5;;375:22;357:41;;345:2;330:18;3139:145:1;312:92:5;1863:368:1;;;;;;:::i;:::-;;:::i;2824:165::-;2881:5;2905:9;2897:46;;;;-1:-1:-1;;;2897:46:1;;961:2:5;2897:46:1;;;943:21:5;1000:2;980:18;;;973:30;1039:26;1019:18;;;1012:54;1083:18;;2897:46:1;;;;;;;;;2972:9;2976:4;2972:3;:9::i;:::-;2966:15;;:3;:15;:::i;:::-;2953:29;2824:165;-1:-1:-1;;2824:165:1:o;3423:1141::-;3471:7;3494:9;3490:25;;-1:-1:-1;3512:3:1;;3423:1141;-1:-1:-1;3423:1141:1:o;3490:25::-;3526:9;3560:66;3553:73;;3549:120;;3639:7;:1;3643:3;3639:7;:::i;:::-;3635:11;;3663:3;3655:4;:11;;3648:18;;3549:120;3689:66;3682:73;;3678:118;;3768:6;:1;3772:2;3768:6;:::i;:::-;3764:10;;3791:2;3783:4;:10;;3776:17;;3678:118;3816:66;3809:73;;3805:118;;3895:6;:1;3899:2;3895:6;:::i;:::-;3891:10;;3918:2;3910:4;:10;;3903:17;;3805:118;3943:66;3936:73;;3932:118;;4022:6;:1;4026:2;4022:6;:::i;:::-;4018:10;;4045:2;4037:4;:10;;4030:17;;3932:118;4070:66;4063:73;;4059:118;;4149:6;:1;4154;4149:6;:::i;:::-;4145:10;;4173:1;4164:4;:10;;4157:17;;4059:118;4197:66;4190:73;;4186:118;;4276:6;:1;4281;4276:6;:::i;:::-;4272:10;;4300:1;4291:4;:10;;4284:17;;4186:118;4324:66;4317:73;;4313:118;;4403:6;:1;4408;4403:6;:::i;:::-;4399:10;;4427:1;4418:4;:10;;4411:17;;4313:118;4451:66;4444:73;;4440:99;;4530:6;:1;4535;4530:6;:::i;:::-;4526:10;4556:1;-1:-1:-1;;;3423:1141:1:o;4702:::-;4750:7;4773:9;4769:25;;-1:-1:-1;4791:3:1;;4702:1141;-1:-1:-1;4702:1141:1:o;4769:25::-;4805:9;-1:-1:-1;;4832:73:1;;4828:120;;4918:7;:1;4922:3;4918:7;:::i;:::-;4914:11;;4942:3;4934:4;:11;;4927:18;;4828:120;-1:-1:-1;;;;;;4961:73:1;;4957:118;;5047:6;:1;5051:2;5047:6;:::i;:::-;5043:10;;5070:2;5062:4;:10;;5055:17;;4957:118;-1:-1:-1;;;;;;5088:73:1;;5084:118;;5174:6;:1;5178:2;5174:6;:::i;:::-;5170:10;;5197:2;5189:4;:10;;5182:17;;5084:118;-1:-1:-1;;;;;;5215:73:1;;5211:118;;5301:6;:1;5305:2;5301:6;:::i;:::-;5297:10;;5324:2;5316:4;:10;;5309:17;;5211:118;-1:-1:-1;;;;;;5342:73:1;;5338:118;;5428:6;:1;5433;5428:6;:::i;:::-;5424:10;;5452:1;5443:4;:10;;5436:17;;5338:118;-1:-1:-1;;;5469:73:1;;5465:118;;5555:6;:1;5560;5555:6;:::i;:::-;5551:10;;5579:1;5570:4;:10;;5563:17;;5465:118;-1:-1:-1;;;5596:73:1;;5592:118;;5682:6;:1;5687;5682:6;:::i;:::-;5678:10;;5706:1;5697:4;:10;;5690:17;;5592:118;-1:-1:-1;;;5723:73:1;;5719:99;;5809:6;:1;5814;5809:6;:::i;2366:323::-;2430:7;;;2476:166;2498:1;2494;:5;;;2476:166;;;2520:17;2540:16;;;;;;;;;;;;;;;;;2557:18;;;2558:8;2565:1;2558:4;:8;:::i;:::-;2557:14;;2570:1;2557:14;:::i;:::-;:18;;;;:::i;:::-;2540:36;;;;;;-1:-1:-1;;;2540:36:1;;;;;;;;;;;;;-1:-1:-1;;;;;;2540:36:1;;-1:-1:-1;2624:5:1;:1;2628;2624:5;:::i;:::-;2609:21;;:10;-1:-1:-1;;;;;2609:21:1;;;;2599:6;:32;2590:41;;2476:166;2501:3;;;;;:::i;:::-;;;;2476:166;;;-1:-1:-1;2667:14:1;;;2366:323;-1:-1:-1;;2366:323:1:o;3139:145::-;3194:4;3214:9;3210:27;;-1:-1:-1;3232:5:1;;3139:145;-1:-1:-1;3139:145:1:o;3210:27::-;3263:8;3270:1;3263:4;:8;:::i;:::-;3255:17;;;:22;;3139:145;-1:-1:-1;3139:145:1:o;1863:368::-;1925:7;1959:1;1952:4;:8;1944:42;;;;-1:-1:-1;;;1944:42:1;;611:2:5;1944:42:1;;;593:21:5;650:2;630:18;;;623:30;-1:-1:-1;;;669:18:5;;;662:51;730:18;;1944:42:1;583:171:5;1944:42:1;1996:15;2030:4;2038:1;2030:9;2026:23;;;-1:-1:-1;2048:1:1;;1863:368;-1:-1:-1;;1863:368:1:o;2026:23::-;2074:3;2067:4;:10;2060:86;;;2108:1;2100:9;;;;2123:12;;;;:::i;:::-;;;2060:86;;;2162:62;2198:25;2218:4;2198:19;:25::i;:::-;2163:29;:7;2183;2163:11;:29::i;:::-;2162:35;;:62::i;3382:96:0:-;3440:7;3466:5;3470:1;3466;:5;:::i;2672:96::-;2730:7;2756:5;2760:1;2756;:5;:::i;14:190:5:-;73:6;126:2;114:9;105:7;101:23;97:32;94:2;;;147:6;139;132:22;94:2;-1:-1:-1;175:23:5;;84:120;-1:-1:-1;84:120:5:o;1499:128::-;1539:3;1570:1;1566:6;1563:1;1560:13;1557:2;;;1576:18;;:::i;:::-;-1:-1:-1;1612:9:5;;1547:80::o;1632:168::-;1672:7;1738:1;1734;1730:6;1726:14;1723:1;1720:21;1715:1;1708:9;1701:17;1697:45;1694:2;;;1745:18;;:::i;:::-;-1:-1:-1;1785:9:5;;1684:116::o;1805:238::-;1843:7;1883:4;1880:1;1876:12;1915:4;1912:1;1908:12;1975:3;1969:4;1965:14;1960:3;1957:23;1950:3;1943:11;1936:19;1932:49;1929:2;;;1984:18;;:::i;:::-;2024:13;;1855:188;-1:-1:-1;;;1855:188:5:o;2048:125::-;2088:4;2116:1;2113;2110:8;2107:2;;;2121:18;;:::i;:::-;-1:-1:-1;2158:9:5;;2097:76::o;2178:175::-;2215:3;2259:4;2252:5;2248:16;2288:4;2279:7;2276:17;2273:2;;;2296:18;;:::i;:::-;2345:1;2332:15;;2223:130;-1:-1:-1;;2223:130:5:o;2358:127::-;2419:10;2414:3;2410:20;2407:1;2400:31;2450:4;2447:1;2440:15;2474:4;2471:1;2464:15"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "399400",
        "executionCost": "467",
        "totalCost": "399867"
      },
      "external": {
        "clz(uint256)": "infinite",
        "ctz(uint256)": "infinite",
        "getLog2Floor(uint256)": "infinite",
        "getLog2TableTimes1M(uint256)": "infinite",
        "isPowerOf2(uint256)": "441",
        "log2ApproxTimes1M(uint256)": "infinite"
      }
    },
    "methodIdentifiers": {
      "clz(uint256)": "30244f7a",
      "ctz(uint256)": "296e7af8",
      "getLog2Floor(uint256)": "06c8e54b",
      "getLog2TableTimes1M(uint256)": "32ef283b",
      "isPowerOf2(uint256)": "d82ae4b1",
      "log2ApproxTimes1M(uint256)": "e3581b68"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"clz\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"ctz\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"getLog2Floor\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"getLog2TableTimes1M\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"isPowerOf2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"log2ApproxTimes1M\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"clz(uint256)\":{\"details\":\"this a binary search implementation\",\"params\":{\"_num\":\"number you want the clz of\"}},\"ctz(uint256)\":{\"details\":\"this a binary search implementation\",\"params\":{\"_num\":\"number you want the ctz of\"}},\"getLog2Floor(uint256)\":{\"params\":{\"_num\":\"number to take floor(log2) of\"},\"returns\":{\"_0\":\"floor(log2) of _num\"}},\"getLog2TableTimes1M(uint256)\":{\"params\":{\"_num\":\"number to take log2 of\"},\"returns\":{\"_0\":\"result after table look-up\"}},\"isPowerOf2(uint256)\":{\"params\":{\"_num\":\"number to check\"},\"returns\":{\"_0\":\"true if number is power of 2, false if not\"}},\"log2ApproxTimes1M(uint256)\":{\"params\":{\"_num\":\"number to take log2 * 1M of\"},\"returns\":{\"_0\":\"approximate log2 times 1M\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"clz(uint256)\":{\"notice\":\"count leading zeros\"},\"ctz(uint256)\":{\"notice\":\"count trailing zeros\"},\"getLog2Floor(uint256)\":{\"notice\":\"get floor of log2 of number\"},\"getLog2TableTimes1M(uint256)\":{\"notice\":\"navigates log2tableTimes1M\"},\"isPowerOf2(uint256)\":{\"notice\":\"checks if a number is Power of 2\"},\"log2ApproxTimes1M(uint256)\":{\"notice\":\"Approximates log2 * 1M\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CartesiMath.sol\":\"CartesiMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/CartesiMath.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title CartesiMath\\n/// @author Felipe Argento\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary CartesiMath {\\n    using SafeMath for uint256;\\n\\n    // mapping values are packed as bytes3 each\\n    // see test/TestCartesiMath.ts for decimal values\\n    bytes constant log2tableTimes1M =\\n        hex\\\"0000000F4240182F421E8480236E082771822AD63A2DC6C0305E8532B04834C96736B3C23876D73A187A3B9D4A3D09003E5EA63FA0C540D17741F28843057D440BA745062945F60246DC1047B917488DC7495ABA4A207C4ADF8A4B98544C4B404CF8AA4DA0E64E44434EE3054F7D6D5013B750A61A5134C851BFF05247BD52CC58534DE753CC8D54486954C19C55384255AC75561E50568DE956FB575766B057D00758376F589CFA5900BA5962BC59C3135A21CA5A7EF15ADA945B34BF5B8D805BE4DF5C3AEA5C8FA95CE3265D356C5D86835DD6735E25455E73005EBFAD5F0B525F55F75F9FA25FE85A60302460770860BD0A61023061467F6189FD61CCAE620E98624FBF62902762CFD5630ECD634D12638AA963C7966403DC643F7F647A8264B4E864EEB56527EC6560906598A365D029660724663D9766738566A8F066DDDA6712476746386779AF67ACAF67DF3A6811526842FA68743268A4FC68D55C6905536934E169640A6992CF69C13169EF326A1CD46A4A186A76FF6AA38C6ACFC0\\\";\\n\\n    /// @notice Approximates log2 * 1M\\n    /// @param _num number to take log2 * 1M of\\n    /// @return approximate log2 times 1M\\n    function log2ApproxTimes1M(uint256 _num) public pure returns (uint256) {\\n        require(_num > 0, \\\"Number cannot be zero\\\");\\n        uint256 leading = 0;\\n\\n        if (_num == 1) return 0;\\n\\n        while (_num > 128) {\\n            _num = _num >> 1;\\n            leading += 1;\\n        }\\n        return (leading.mul(uint256(1000000))).add(getLog2TableTimes1M(_num));\\n    }\\n\\n    /// @notice navigates log2tableTimes1M\\n    /// @param _num number to take log2 of\\n    /// @return result after table look-up\\n    function getLog2TableTimes1M(uint256 _num) public pure returns (uint256) {\\n        bytes3 result = 0;\\n        for (uint8 i = 0; i < 3; i++) {\\n            bytes3 tempResult = log2tableTimes1M[(_num - 1) * 3 + i];\\n            result = result | (tempResult >> (i * 8));\\n        }\\n\\n        return uint256(uint24(result));\\n    }\\n\\n    /// @notice get floor of log2 of number\\n    /// @param _num number to take floor(log2) of\\n    /// @return floor(log2) of _num\\n   function getLog2Floor(uint256 _num) public pure returns (uint8) {\\n       require(_num != 0, \\\"log of zero is undefined\\\");\\n\\n       return uint8(255 - clz(_num));\\n    }\\n\\n    /// @notice checks if a number is Power of 2\\n    /// @param _num number to check\\n    /// @return true if number is power of 2, false if not\\n    function isPowerOf2(uint256 _num) public pure returns (bool) {\\n        if (_num == 0) return false;\\n\\n        return _num & (_num - 1) == 0;\\n    }\\n\\n    /// @notice count trailing zeros\\n    /// @param _num number you want the ctz of\\n    /// @dev this a binary search implementation\\n    function ctz(uint256 _num) public pure returns (uint256) {\\n        if (_num == 0) return 256;\\n\\n        uint256 n = 0;\\n        if (_num & 0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) { n = n + 128; _num = _num >> 128; }\\n        if (_num & 0x000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF == 0) { n = n + 64; _num = _num >> 64; }\\n        if (_num & 0x00000000000000000000000000000000000000000000000000000000FFFFFFFF == 0) { n = n + 32; _num = _num >> 32; }\\n        if (_num & 0x000000000000000000000000000000000000000000000000000000000000FFFF == 0) { n = n + 16; _num = _num >> 16; }\\n        if (_num & 0x00000000000000000000000000000000000000000000000000000000000000FF == 0) { n = n +  8; _num = _num >>  8; }\\n        if (_num & 0x000000000000000000000000000000000000000000000000000000000000000F == 0) { n = n +  4; _num = _num >>  4; }\\n        if (_num & 0x0000000000000000000000000000000000000000000000000000000000000003 == 0) { n = n +  2; _num = _num >>  2; }\\n        if (_num & 0x0000000000000000000000000000000000000000000000000000000000000001 == 0) { n = n +  1; }\\n\\n        return n;\\n    }\\n\\n    /// @notice count leading zeros\\n    /// @param _num number you want the clz of\\n    /// @dev this a binary search implementation\\n    function clz(uint256 _num) public pure returns (uint256) {\\n        if (_num == 0) return 256;\\n\\n        uint256 n = 0;\\n        if (_num & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 == 0) { n = n + 128; _num = _num << 128; }\\n        if (_num & 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 == 0) { n = n + 64; _num = _num << 64; }\\n        if (_num & 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 == 0) { n = n + 32; _num = _num << 32; }\\n        if (_num & 0xFFFF000000000000000000000000000000000000000000000000000000000000 == 0) { n = n + 16; _num = _num << 16; }\\n        if (_num & 0xFF00000000000000000000000000000000000000000000000000000000000000 == 0) { n = n +  8; _num = _num <<  8; }\\n        if (_num & 0xF000000000000000000000000000000000000000000000000000000000000000 == 0) { n = n +  4; _num = _num <<  4; }\\n        if (_num & 0xC000000000000000000000000000000000000000000000000000000000000000 == 0) { n = n +  2; _num = _num <<  2; }\\n        if (_num & 0x8000000000000000000000000000000000000000000000000000000000000000 == 0) { n = n +  1; }\\n\\n        return n;\\n    }\\n}\\n\",\"keccak256\":\"0xca784f2c33319c7e0501f836b6527dc39b1f0ae5768e2a16b87a7b3a9b2f73ad\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "clz(uint256)": {
        "notice": "count leading zeros"
      },
      "ctz(uint256)": {
        "notice": "count trailing zeros"
      },
      "getLog2Floor(uint256)": {
        "notice": "get floor of log2 of number"
      },
      "getLog2TableTimes1M(uint256)": {
        "notice": "navigates log2tableTimes1M"
      },
      "isPowerOf2(uint256)": {
        "notice": "checks if a number is Power of 2"
      },
      "log2ApproxTimes1M(uint256)": {
        "notice": "Approximates log2 * 1M"
      }
    },
    "version": 1
  }
}