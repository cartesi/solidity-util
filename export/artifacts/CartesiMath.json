{
  "contractName": "CartesiMath",
  "sourceName": "contracts/CartesiMath.sol",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_num",
          "type": "uint256"
        }
      ],
      "name": "log2ApproxTimes1M",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "log2ApproxTimes1M(uint256)": {
        "params": {
          "_num": "number to take log2 * 1M of"
        }
      }
    },
    "version": 1
  },
  "evm": {
    "bytecode": {
      "generatedSources": [],
      "linkReferences": {},
      "object": "",
      "opcodes": "",
      "sourceMap": ""
    },
    "deployedBytecode": {
      "generatedSources": [],
      "immutableReferences": {},
      "linkReferences": {},
      "object": "",
      "opcodes": "",
      "sourceMap": ""
    },
    "gasEstimates": null,
    "methodIdentifiers": {
      "log2ApproxTimes1M(uint256)": "e3581b68"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"log2ApproxTimes1M\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"log2ApproxTimes1M(uint256)\":{\"params\":{\"_num\":\"number to take log2 * 1M of\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"log2ApproxTimes1M(uint256)\":{\"notice\":\"Approximates log2 * 1M\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CartesiMath.sol\":\"CartesiMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"contracts/CartesiMath.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title CartesiMath\\n/// @author Felipe Argento\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nabstract contract CartesiMath {\\n    using SafeMath for uint256;\\n    mapping(uint256 => uint256) log2tableTimes1M;\\n\\n    constructor() {\\n        log2tableTimes1M[1] = 0;\\n        log2tableTimes1M[2] = 1000000;\\n        log2tableTimes1M[3] = 1584962;\\n        log2tableTimes1M[4] = 2000000;\\n        log2tableTimes1M[5] = 2321928;\\n        log2tableTimes1M[6] = 2584962;\\n        log2tableTimes1M[7] = 2807354;\\n        log2tableTimes1M[8] = 3000000;\\n        log2tableTimes1M[9] = 3169925;\\n        log2tableTimes1M[10] = 3321928;\\n        log2tableTimes1M[11] = 3459431;\\n        log2tableTimes1M[12] = 3584962;\\n        log2tableTimes1M[13] = 3700439;\\n        log2tableTimes1M[14] = 3807354;\\n        log2tableTimes1M[15] = 3906890;\\n        log2tableTimes1M[16] = 4000000;\\n        log2tableTimes1M[17] = 4087462;\\n        log2tableTimes1M[18] = 4169925;\\n        log2tableTimes1M[19] = 4247927;\\n        log2tableTimes1M[20] = 4321928;\\n        log2tableTimes1M[21] = 4392317;\\n        log2tableTimes1M[22] = 4459431;\\n        log2tableTimes1M[23] = 4523561;\\n        log2tableTimes1M[24] = 4584962;\\n        log2tableTimes1M[25] = 4643856;\\n        log2tableTimes1M[26] = 4700439;\\n        log2tableTimes1M[27] = 4754887;\\n        log2tableTimes1M[28] = 4807354;\\n        log2tableTimes1M[29] = 4857980;\\n        log2tableTimes1M[30] = 4906890;\\n        log2tableTimes1M[31] = 4954196;\\n        log2tableTimes1M[32] = 5000000;\\n        log2tableTimes1M[33] = 5044394;\\n        log2tableTimes1M[34] = 5087462;\\n        log2tableTimes1M[35] = 5129283;\\n        log2tableTimes1M[36] = 5169925;\\n        log2tableTimes1M[37] = 5209453;\\n        log2tableTimes1M[38] = 5247927;\\n        log2tableTimes1M[39] = 5285402;\\n        log2tableTimes1M[40] = 5321928;\\n        log2tableTimes1M[41] = 5357552;\\n        log2tableTimes1M[42] = 5392317;\\n        log2tableTimes1M[43] = 5426264;\\n        log2tableTimes1M[44] = 5459431;\\n        log2tableTimes1M[45] = 5491853;\\n        log2tableTimes1M[46] = 5523561;\\n        log2tableTimes1M[47] = 5554588;\\n        log2tableTimes1M[48] = 5584962;\\n        log2tableTimes1M[49] = 5614709;\\n        log2tableTimes1M[50] = 5643856;\\n        log2tableTimes1M[51] = 5672425;\\n        log2tableTimes1M[52] = 5700439;\\n        log2tableTimes1M[53] = 5727920;\\n        log2tableTimes1M[54] = 5754887;\\n        log2tableTimes1M[55] = 5781359;\\n        log2tableTimes1M[56] = 5807354;\\n        log2tableTimes1M[57] = 5832890;\\n        log2tableTimes1M[58] = 5857980;\\n        log2tableTimes1M[59] = 5882643;\\n        log2tableTimes1M[60] = 5906890;\\n        log2tableTimes1M[61] = 5930737;\\n        log2tableTimes1M[62] = 5954196;\\n        log2tableTimes1M[63] = 5977279;\\n        log2tableTimes1M[64] = 6000000;\\n        log2tableTimes1M[65] = 6022367;\\n        log2tableTimes1M[66] = 6044394;\\n        log2tableTimes1M[67] = 6066089;\\n        log2tableTimes1M[68] = 6087462;\\n        log2tableTimes1M[69] = 6108524;\\n        log2tableTimes1M[70] = 6129283;\\n        log2tableTimes1M[71] = 6149747;\\n        log2tableTimes1M[72] = 6169925;\\n        log2tableTimes1M[73] = 6189824;\\n        log2tableTimes1M[74] = 6209453;\\n        log2tableTimes1M[75] = 6228818;\\n        log2tableTimes1M[76] = 6247927;\\n        log2tableTimes1M[77] = 6266786;\\n        log2tableTimes1M[78] = 6285402;\\n        log2tableTimes1M[79] = 6303780;\\n        log2tableTimes1M[80] = 6321928;\\n        log2tableTimes1M[81] = 6339850;\\n        log2tableTimes1M[82] = 6357552;\\n        log2tableTimes1M[83] = 6375039;\\n        log2tableTimes1M[84] = 6392317;\\n        log2tableTimes1M[85] = 6409390;\\n        log2tableTimes1M[86] = 6426264;\\n        log2tableTimes1M[87] = 6442943;\\n        log2tableTimes1M[88] = 6459431;\\n        log2tableTimes1M[89] = 6475733;\\n        log2tableTimes1M[90] = 6491853;\\n        log2tableTimes1M[91] = 6507794;\\n        log2tableTimes1M[92] = 6523561;\\n        log2tableTimes1M[93] = 6539158;\\n        log2tableTimes1M[94] = 6554588;\\n        log2tableTimes1M[95] = 6569855;\\n        log2tableTimes1M[96] = 6584962;\\n        log2tableTimes1M[97] = 6599912;\\n        log2tableTimes1M[98] = 6614709;\\n        log2tableTimes1M[99] = 6629356;\\n        log2tableTimes1M[100] = 6643856;\\n        log2tableTimes1M[101] = 6658211;\\n        log2tableTimes1M[102] = 6672425;\\n        log2tableTimes1M[103] = 6686500;\\n        log2tableTimes1M[104] = 6700439;\\n        log2tableTimes1M[105] = 6714245;\\n        log2tableTimes1M[106] = 6727920;\\n        log2tableTimes1M[107] = 6741466;\\n        log2tableTimes1M[108] = 6754887;\\n        log2tableTimes1M[109] = 6768184;\\n        log2tableTimes1M[110] = 6781359;\\n        log2tableTimes1M[111] = 6794415;\\n        log2tableTimes1M[112] = 6807354;\\n        log2tableTimes1M[113] = 6820178;\\n        log2tableTimes1M[114] = 6832890;\\n        log2tableTimes1M[115] = 6845490;\\n        log2tableTimes1M[116] = 6857980;\\n        log2tableTimes1M[117] = 6870364;\\n        log2tableTimes1M[118] = 6882643;\\n        log2tableTimes1M[119] = 6894817;\\n        log2tableTimes1M[120] = 6906890;\\n        log2tableTimes1M[121] = 6918863;\\n        log2tableTimes1M[122] = 6930737;\\n        log2tableTimes1M[123] = 6942514;\\n        log2tableTimes1M[124] = 6954196;\\n        log2tableTimes1M[125] = 6965784;\\n        log2tableTimes1M[126] = 6977279;\\n        log2tableTimes1M[127] = 6988684;\\n        log2tableTimes1M[128] = 7000000;\\n    }\\n\\n    /// @notice Approximates log2 * 1M\\n    /// @param _num number to take log2 * 1M of\\n    function log2ApproxTimes1M(uint256 _num) public view returns (uint256) {\\n        require (_num > 0, \\\"Number cannot be zero\\\");\\n        uint256 leading = 0;\\n\\n        if (_num == 1) return 0;\\n\\n        while (_num > 128) {\\n           _num = _num >> 1;\\n           leading += 1;\\n       }\\n       return (leading.mul(uint256(1000000))).add(log2tableTimes1M[_num]);\\n    }\\n}\\n\",\"keccak256\":\"0x496a53dd1d169264fe58353fef5d283dfc8a78789757d32af69be41faaa97d6e\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 205,
        "contract": "contracts/CartesiMath.sol:CartesiMath",
        "label": "log2tableTimes1M",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "log2ApproxTimes1M(uint256)": {
        "notice": "Approximates log2 * 1M"
      }
    },
    "version": 1
  }
}