{
  "address": "0x96A164F172398Fa65D92CF592FE44AF6C4b36991",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "hashes",
          "type": "bytes32[]"
        }
      ],
      "name": "calculateRootFromPowerOfTwo",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getEmptyTreeHashAtIndex",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_wordIndex",
          "type": "uint256"
        }
      ],
      "name": "getHashOfWordAtIndex",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "_log2Size",
          "type": "uint8"
        }
      ],
      "name": "getMerkleRootFromBytes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_log2Size",
          "type": "uint8"
        }
      ],
      "name": "getPristineHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_position",
          "type": "uint64"
        },
        {
          "internalType": "bytes8",
          "name": "_value",
          "type": "bytes8"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "getRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_position",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "_logSizeOfReplacement",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_logSizeOfFullDrive",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_replacement",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "siblings",
          "type": "bytes32[]"
        }
      ],
      "name": "getRootAfterReplacementInDrive",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_position",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "_logOfSize",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_drive",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "siblings",
          "type": "bytes32[]"
        }
      ],
      "name": "getRootWithDrive",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x44fcfa823895b5a10b3c3066a00c29136969772ded6679eb0029a2ce207fd9dc",
  "receipt": {
    "to": null,
    "from": "0x18930e8a66a1DbE21D00581216789AAB7460Afd0",
    "contractAddress": "0x96A164F172398Fa65D92CF592FE44AF6C4b36991",
    "transactionIndex": 0,
    "gasUsed": "1610647",
    "logsBloom": "0x
    "blockHash": "0x743359b959b9ef7234e522384ecec97cae4cd1ed478384a30ec7375a47340c5c",
    "transactionHash": "0x44fcfa823895b5a10b3c3066a00c29136969772ded6679eb0029a2ce207fd9dc",
    "logs": [],
    "blockNumber": 9714941,
    "cumulativeGasUsed": "1610647",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "74deced164c6fb3999cefd8fa8f47469",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"hashes\",\"type\":\"bytes32[]\"}],\"name\":\"calculateRootFromPowerOfTwo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getEmptyTreeHashAtIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_wordIndex\",\"type\":\"uint256\"}],\"name\":\"getHashOfWordAtIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"_log2Size\",\"type\":\"uint8\"}],\"name\":\"getMerkleRootFromBytes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_log2Size\",\"type\":\"uint8\"}],\"name\":\"getPristineHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_position\",\"type\":\"uint64\"},{\"internalType\":\"bytes8\",\"name\":\"_value\",\"type\":\"bytes8\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"getRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_position\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"_logSizeOfReplacement\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_logSizeOfFullDrive\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_replacement\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"siblings\",\"type\":\"bytes32[]\"}],\"name\":\"getRootAfterReplacementInDrive\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_position\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"_logOfSize\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_drive\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"siblings\",\"type\":\"bytes32[]\"}],\"name\":\"getRootWithDrive\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateRootFromPowerOfTwo(bytes32[])\":{\"params\":{\"hashes\":\"The array containing power of 2 elements\"},\"returns\":{\"_0\":\"byte32 the root hash being calculated\"}},\"getEmptyTreeHashAtIndex(uint256)\":{\"details\":\"first index is keccak(0), second index is keccak(keccak(0), keccak(0))\",\"params\":{\"_index\":\"of hash wanted\"}},\"getHashOfWordAtIndex(bytes,uint256)\":{\"details\":\"if word is incomplete (< 8 bytes) it gets padded with zeroes\",\"params\":{\"_data\":\"array of bytes\",\"_wordIndex\":\"index of word inside the bytes to get the hash of\"}},\"getMerkleRootFromBytes(bytes,uint8)\":{\"details\":\"_data is padded with zeroes until is multiple of 8root is completed with zero tree until log2size is completehashes are taken word by word (8 bytes by 8 bytes)\",\"params\":{\"_data\":\"array of bytes to be merklelized\",\"_log2Size\":\"log2 of total size of the drive\"}},\"getPristineHash(uint8)\":{\"details\":\"using the precomputed EMPTY_TREE_HASHES is cheaper\",\"params\":{\"_log2Size\":\"log2 of size of the empty drive\"},\"returns\":{\"_0\":\"merkle root hash of the drive of size 1 << log2Size filled with zeros\"}},\"getRoot(uint64,bytes8,bytes32[])\":{\"params\":{\"_position\":\"position of word in drive\",\"_value\":\"word to include in drive\",\"proof\":\"array of siblings to generate merkle root\"},\"returns\":{\"_0\":\"new merkle root hash after _value inclusion\"}},\"getRootAfterReplacementInDrive(uint64,uint8,uint8,bytes32,bytes32[])\":{\"params\":{\"_logSizeOfFullDrive\":\"log2 of size the full drive, which can be the entire machine\",\"_logSizeOfReplacement\":\"log2 of size the replacement\",\"_position\":\"position of _drive\",\"_replacement\":\"hash of the replacement\",\"siblings\":\"of replacement that merkle root can be calculated\"}},\"getRootWithDrive(uint64,uint8,bytes32,bytes32[])\":{\"params\":{\"_drive\":\"drive to be included\",\"_logOfSize\":\"log2 of size of _drive\",\"_position\":\"position of _drive\",\"siblings\":\"_drive's so that merkle root can be calculated\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateRootFromPowerOfTwo(bytes32[])\":{\"notice\":\"Calculate the root of Merkle tree from an array of power of 2 elements\"},\"getEmptyTreeHashAtIndex(uint256)\":{\"notice\":\"Gets precomputed hash of zero in empty tree hashes\"},\"getHashOfWordAtIndex(bytes,uint256)\":{\"notice\":\"Get the hash of a word in an array of bytes\"},\"getMerkleRootFromBytes(bytes,uint8)\":{\"notice\":\"get merkle root of generic array of bytes\"},\"getPristineHash(uint8)\":{\"notice\":\"Gets the pristine hash of a drive full of zeroes\"},\"getRoot(uint64,bytes8,bytes32[])\":{\"notice\":\"Gets merkle root of drive with _value on _position\"},\"getRootAfterReplacementInDrive(uint64,uint8,uint8,bytes32,bytes32[])\":{\"notice\":\"Gets merkle root hash of drive with a replacement\"},\"getRootWithDrive(uint64,uint8,bytes32,bytes32[])\":{\"notice\":\"Gets merkle root hash of machine with drive _drive\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Merkle.sol\":\"Merkle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CartesiMath.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title CartesiMath\\n/// @author Felipe Argento\\npragma solidity ^0.8.0;\\n\\nlibrary CartesiMath {\\n    // mapping values are packed as bytes3 each\\n    // see test/TestCartesiMath.ts for decimal values\\n    bytes constant log2tableTimes1M =\\n        hex\\\"0000000F4240182F421E8480236E082771822AD63A2DC6C0305E8532B04834C96736B3C23876D73A187A3B9D4A3D09003E5EA63FA0C540D17741F28843057D440BA745062945F60246DC1047B917488DC7495ABA4A207C4ADF8A4B98544C4B404CF8AA4DA0E64E44434EE3054F7D6D5013B750A61A5134C851BFF05247BD52CC58534DE753CC8D54486954C19C55384255AC75561E50568DE956FB575766B057D00758376F589CFA5900BA5962BC59C3135A21CA5A7EF15ADA945B34BF5B8D805BE4DF5C3AEA5C8FA95CE3265D356C5D86835DD6735E25455E73005EBFAD5F0B525F55F75F9FA25FE85A60302460770860BD0A61023061467F6189FD61CCAE620E98624FBF62902762CFD5630ECD634D12638AA963C7966403DC643F7F647A8264B4E864EEB56527EC6560906598A365D029660724663D9766738566A8F066DDDA6712476746386779AF67ACAF67DF3A6811526842FA68743268A4FC68D55C6905536934E169640A6992CF69C13169EF326A1CD46A4A186A76FF6AA38C6ACFC0\\\";\\n\\n    /// @notice Approximates log2 * 1M\\n    /// @param _num number to take log2 * 1M of\\n    /// @return approximate log2 times 1M\\n    function log2ApproxTimes1M(uint256 _num) public pure returns (uint256) {\\n        require(_num > 0, \\\"Number cannot be zero\\\");\\n        uint256 leading = 0;\\n\\n        if (_num == 1) return 0;\\n\\n        while (_num > 128) {\\n            _num = _num >> 1;\\n            leading += 1;\\n        }\\n        return (leading * uint256(1000000)) + (getLog2TableTimes1M(_num));\\n    }\\n\\n    /// @notice navigates log2tableTimes1M\\n    /// @param _num number to take log2 of\\n    /// @return result after table look-up\\n    function getLog2TableTimes1M(uint256 _num) public pure returns (uint256) {\\n        bytes3 result = 0;\\n        for (uint8 i = 0; i < 3; i++) {\\n            bytes3 tempResult = log2tableTimes1M[(_num - 1) * 3 + i];\\n            result = result | (tempResult >> (i * 8));\\n        }\\n\\n        return uint256(uint24(result));\\n    }\\n\\n    /// @notice get floor of log2 of number\\n    /// @param _num number to take floor(log2) of\\n    /// @return floor(log2) of _num\\n   function getLog2Floor(uint256 _num) public pure returns (uint8) {\\n       require(_num != 0, \\\"log of zero is undefined\\\");\\n\\n       return uint8(255 - clz(_num));\\n    }\\n\\n    /// @notice checks if a number is Power of 2\\n    /// @param _num number to check\\n    /// @return true if number is power of 2, false if not\\n    function isPowerOf2(uint256 _num) public pure returns (bool) {\\n        if (_num == 0) return false;\\n\\n        return _num & (_num - 1) == 0;\\n    }\\n\\n    /// @notice count trailing zeros\\n    /// @param _num number you want the ctz of\\n    /// @dev this a binary search implementation\\n    function ctz(uint256 _num) public pure returns (uint256) {\\n        if (_num == 0) return 256;\\n\\n        uint256 n = 0;\\n        if (_num & 0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) { n = n + 128; _num = _num >> 128; }\\n        if (_num & 0x000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF == 0) { n = n + 64; _num = _num >> 64; }\\n        if (_num & 0x00000000000000000000000000000000000000000000000000000000FFFFFFFF == 0) { n = n + 32; _num = _num >> 32; }\\n        if (_num & 0x000000000000000000000000000000000000000000000000000000000000FFFF == 0) { n = n + 16; _num = _num >> 16; }\\n        if (_num & 0x00000000000000000000000000000000000000000000000000000000000000FF == 0) { n = n +  8; _num = _num >>  8; }\\n        if (_num & 0x000000000000000000000000000000000000000000000000000000000000000F == 0) { n = n +  4; _num = _num >>  4; }\\n        if (_num & 0x0000000000000000000000000000000000000000000000000000000000000003 == 0) { n = n +  2; _num = _num >>  2; }\\n        if (_num & 0x0000000000000000000000000000000000000000000000000000000000000001 == 0) { n = n +  1; }\\n\\n        return n;\\n    }\\n\\n    /// @notice count leading zeros\\n    /// @param _num number you want the clz of\\n    /// @dev this a binary search implementation\\n    function clz(uint256 _num) public pure returns (uint256) {\\n        if (_num == 0) return 256;\\n\\n        uint256 n = 0;\\n        if (_num & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 == 0) { n = n + 128; _num = _num << 128; }\\n        if (_num & 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 == 0) { n = n + 64; _num = _num << 64; }\\n        if (_num & 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 == 0) { n = n + 32; _num = _num << 32; }\\n        if (_num & 0xFFFF000000000000000000000000000000000000000000000000000000000000 == 0) { n = n + 16; _num = _num << 16; }\\n        if (_num & 0xFF00000000000000000000000000000000000000000000000000000000000000 == 0) { n = n +  8; _num = _num <<  8; }\\n        if (_num & 0xF000000000000000000000000000000000000000000000000000000000000000 == 0) { n = n +  4; _num = _num <<  4; }\\n        if (_num & 0xC000000000000000000000000000000000000000000000000000000000000000 == 0) { n = n +  2; _num = _num <<  2; }\\n        if (_num & 0x8000000000000000000000000000000000000000000000000000000000000000 == 0) { n = n +  1; }\\n\\n        return n;\\n    }\\n}\\n\",\"keccak256\":\"0x28b74012e966438edff701decdc5ffd207b3f0244af65fbd7d397050986e58d4\",\"license\":\"Apache-2.0\"},\"contracts/Merkle.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Library for Merkle proofs\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CartesiMath.sol\\\";\\n\\nlibrary Merkle {\\n    using CartesiMath for uint256;\\n\\n    uint256 constant L_WORD_SIZE = 3; // word = 8 bytes, log = 3\\n\\n    // merkle root hashes of trees of zero concatenated\\n    // 32 bytes for each root, first one is keccak(0), second one is\\n    // keccak(keccack(0), keccak(0)) and so on\\n\\n    bytes constant EMPTY_TREE_HASHES =\\n        hex\\\"011b4d03dd8c01f1049143cf9c4c817e4b167f1d1b83e5c6f0f10d89ba1e7bce4d9470a821fbe90117ec357e30bad9305732fb19ddf54a07dd3e29f440619254ae39ce8537aca75e2eff3e38c98011dfe934e700a0967732fc07b430dd656a233fc9a15f5b4869c872f81087bb6104b7d63e6f9ab47f2c43f3535eae7172aa7f17d2dd614cddaa4d879276b11e0672c9560033d3e8453a1d045339d34ba601b9c37b8b13ca95166fb7af16988a70fcc90f38bf9126fd833da710a47fb37a55e68e7a427fa943d9966b389f4f257173676090c6e95f43e2cb6d65f8758111e30930b0b9deb73e155c59740bacf14a6ff04b64bb8e201a506409c3fe381ca4ea90cd5deac729d0fdaccc441d09d7325f41586ba13c801b7eccae0f95d8f3933efed8b96e5b7f6f459e9cb6a2f41bf276c7b85c10cd4662c04cbbb365434726c0a0c9695393027fb106a8153109ac516288a88b28a93817899460d6310b71cf1e6163e8806fa0d4b197a259e8c3ac28864268159d0ac85f8581ca28fa7d2c0c03eb91e3eee5ca7a3da2b3053c9770db73599fb149f620e3facef95e947c0ee860b72122e31e4bbd2b7c783d79cc30f60c6238651da7f0726f767d22747264fdb046f7549f26cc70ed5e18baeb6c81bb0625cb95bb4019aeecd40774ee87ae29ec517a71f6ee264c5d761379b3d7d617ca83677374b49d10aec50505ac087408ca892b573c267a712a52e1d06421fe276a03efb1889f337201110fdc32a81f8e152499af665835aabfdc6740c7e2c3791a31c3cdc9f5ab962f681b12fc092816a62f27d86025599a41233848702f0cfc0437b445682df51147a632a0a083d2d38b5e13e466a8935afff58bb533b3ef5d27fba63ee6b0fd9e67ff20af9d50deee3f8bf065ec220c1fd4ba57e341261d55997f85d66d32152526736872693d2b437a233e2337b715f6ac9a6a272622fdc2d67fcfe1da3459f8dab4ed7e40a657a54c36766c5e8ac9a88b35b05c34747e6507f6b044ab66180dc76ac1a696de03189593fedc0d0dbbd855c8ead673544899b0960e4a5a7ca43b4ef90afe607de7698caefdc242788f654b57a4fb32a71b335ef6ff9a4cc118b282b53bdd6d6192b7a82c3c5126b9c7e33c8e5a5ac9738b8bd31247fb7402054f97b573e8abb9faad219f4fd085aceaa7f542d787ee4196d365f3cc566e7bbcfbfd451230c48d804c017d21e2d8fa914e2559bb72bf0ab78c8ab92f00ef0d0d576eccdd486b64138a4172674857e543d1d5b639058dd908186597e366ad5f3d9c7ceaff44d04d1550b8d33abc751df07437834ba5acb32328a396994aebb3c40f759c2d6d7a3cb5377e55d5d218ef5a296dda8ddc355f3f50c3d0b660a51dfa4d98a6a5a33564556cf83c1373a814641d6a1dcef97b883fee61bb84fe60a3409340217e629cc7e4dcc93b85d8820921ff5826148b60e6939acd7838e1d7f20562bff8ee4b5ec4a05ad997a57b9796fdcb2eda87883c2640b072b140b946bfdf6575cacc066fdae04f6951e63624cbd316a677cad529bbe4e97b9144e4bc06c4afd1de55dd3e1175f90423847a230d34dfb71ed56f2965a7f6c72e6aa33c24c303fd67745d632656c5ef90bec80f4f5d1daa251988826cef375c81c36bf457e09687056f924677cb0bccf98dff81e014ce25f2d132497923e267363963cdf4302c5049d63131dc03fd95f65d8b6aa5934f817252c028c90f56d413b9d5d10d89790707dae2fabb249f649929927c21dd71e3f656826de5451c5da375aadecbd59d5ebf3a31fae65ac1b316a1611f1b276b26530f58d7247df459ce1f86db1d734f6f811932f042cee45d0e455306d01081bc3384f82c5fb2aacaa19d89cdfa46cc916eac61121475ba2e6191b4feecbe1789717021a158ace5d06744b40f551076b67cd63af60007f8c99876e1424883a45ec49d497ddaf808a5521ca74a999ab0b3c7aa9c80f85e93977ec61ce68b20307a1a81f71ca645b568fcd319ccbb5f651e87b707d37c39e15f945ea69e2f7c7d2ccc85b7e654c07e96f0636ae4044fe0e38590b431795ad0f8647bdd613713ada493cc17efd313206380e6a685b8198475bbd021c6e9d94daab2214947127506073e44d5408ba166c512a0b86805d07f5a44d3c41706be2bc15e712e55805248b92e8677d90f6d284d1d6ffaff2c430657042a0e82624fa3717b06cc0a6fd12230ea586dae83019fb9e06034ed2803c98d554b93c9a52348cafff75c40174a91f9ae6b8647854a156029f0b88b83316663ce574a4978277bb6bb27a31085634b6ec78864b6d8201c7e93903d75815067e378289a3d072ae172dafa6a452470f8d645bebfad9779594fc0784bb764a22e3a8181d93db7bf97893c414217a618ccb14caa9e92e8c61673afc9583662e812adba1f87a9c68202d60e909efab43c42c0cb00695fc7f1ffe67c75ca894c3c51e1e5e731360199e600f6ced9a87b2a6a87e70bf251bb5075ab222138288164b2eda727515ea7de12e2496d4fe42ea8d1a120c03cf9c50622c2afe4acb0dad98fd62d07ab4e828a94495f6d1ab973982c7ccbe6c1fae02788e4422ae22282fa49cbdb04ba54a7a238c6fc41187451383460762c06d1c8a72b9cd718866ad4b689e10c9a8c38fe5ef045bd785b01e980fc82c7e3532ce81876b778dd9f1ceeba4478e86411fb6fdd790683916ca832592485093644e8760cd7b4c01dba1ccc82b661bf13f0e3f34acd6b88\\\";\\n\\n    // number of hashes in EMPTY_TREE_HASHES\\n    uint256 constant EMPTY_TREE_SIZE = 61 * 32; // 32 bytes per 61 indexes (64 words)\\n\\n    /// @notice Gets the pristine hash of a drive full of zeroes\\n    /// @param _log2Size log2 of size of the empty drive\\n    /// @return merkle root hash of the drive of size 1 << log2Size filled with zeros\\n    /// @dev using the precomputed EMPTY_TREE_HASHES is cheaper\\n    function getPristineHash(uint8 _log2Size) public pure returns (bytes32) {\\n        require(_log2Size >= 3, \\\"Has to be at least one word\\\");\\n        require(_log2Size <= 64, \\\"Cannot be bigger than the machine itself\\\");\\n\\n        bytes8 value = 0;\\n        bytes32 runningHash = keccak256(abi.encodePacked(value));\\n\\n        for (uint256 i = 3; i < _log2Size; i++) {\\n            runningHash = keccak256(abi.encodePacked(runningHash, runningHash));\\n        }\\n\\n        return runningHash;\\n    }\\n\\n    /// @notice Gets merkle root of drive with _value on _position\\n    /// @param _position position of word in drive\\n    /// @param _value word to include in drive\\n    /// @param proof array of siblings to generate merkle root\\n    /// @return new merkle root hash after _value inclusion\\n    function getRoot(\\n        uint64 _position,\\n        bytes8 _value,\\n        bytes32[] memory proof\\n    ) public pure returns (bytes32) {\\n        bytes32 runningHash = keccak256(abi.encodePacked(_value));\\n\\n        return getRootAfterReplacementInDrive(\\n            _position,\\n            3,\\n            64,\\n            runningHash,\\n            proof\\n        );\\n    }\\n\\n    /// @notice Gets merkle root hash of machine with drive _drive\\n    /// @param _position position of _drive\\n    /// @param _logOfSize log2 of size of _drive\\n    /// @param _drive drive to be included\\n    /// @param siblings _drive's so that merkle root can be calculated\\n    function getRootWithDrive(\\n        uint64 _position,\\n        uint8 _logOfSize,\\n        bytes32 _drive,\\n        bytes32[] memory siblings\\n    ) public pure returns (bytes32) {\\n        // treating the full 2**64 machine as a drive\\n        return getRootAfterReplacementInDrive(\\n            _position,\\n            _logOfSize,\\n            64,\\n            _drive,\\n            siblings\\n        );\\n    }\\n\\n    /// @notice Gets merkle root hash of drive with a replacement\\n    /// @param _position position of _drive\\n    /// @param _logSizeOfReplacement log2 of size the replacement\\n    /// @param _logSizeOfFullDrive log2 of size the full drive, which can be the entire machine\\n    /// @param _replacement hash of the replacement\\n    /// @param siblings of replacement that merkle root can be calculated\\n    function getRootAfterReplacementInDrive(\\n        uint64 _position,\\n        uint8 _logSizeOfReplacement,\\n        uint8 _logSizeOfFullDrive,\\n        bytes32 _replacement,\\n        bytes32[] memory siblings\\n    ) public pure returns (bytes32) {\\n        require(_logSizeOfFullDrive >= _logSizeOfReplacement, \\\"Replacement bigger than original drive\\\");\\n        require(_logSizeOfReplacement >= 3, \\\"Replacement must be at least one word\\\");\\n        require(_logSizeOfFullDrive <= 64, \\\"Full drive can't be bigger than the machine itself\\\");\\n\\n        uint64 size = uint64(1) << _logSizeOfReplacement;\\n\\n        require(((size - 1) & _position) == 0, \\\"Position is not aligned\\\");\\n        require(\\n            siblings.length == _logSizeOfFullDrive - _logSizeOfReplacement,\\n            \\\"Proof length does not match\\\"\\n        );\\n\\n        for (uint64 i = 0; i < siblings.length; i++) {\\n            if ((_position & (size << i)) == 0) {\\n                _replacement = keccak256(abi.encodePacked(_replacement, siblings[i]));\\n            } else {\\n                _replacement = keccak256(abi.encodePacked(siblings[i], _replacement));\\n            }\\n        }\\n\\n        return _replacement;\\n    }\\n\\n    /// @notice Gets precomputed hash of zero in empty tree hashes\\n    /// @param _index of hash wanted\\n    /// @dev first index is keccak(0), second index is keccak(keccak(0), keccak(0))\\n    function getEmptyTreeHashAtIndex(uint256 _index)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        uint256 start = _index * 32;\\n        require(EMPTY_TREE_SIZE >= start + 32, \\\"index out of bounds\\\");\\n        bytes32 hashedZeros;\\n        bytes memory zeroTree = EMPTY_TREE_HASHES;\\n\\n        // first word is length, then skip index words\\n        assembly {\\n            hashedZeros := mload(add(add(zeroTree, 0x20), start))\\n        }\\n        return hashedZeros;\\n    }\\n\\n    /// @notice get merkle root of generic array of bytes\\n    /// @param _data array of bytes to be merklelized\\n    /// @param _log2Size log2 of total size of the drive\\n    /// @dev _data is padded with zeroes until is multiple of 8\\n    /// @dev root is completed with zero tree until log2size is complete\\n    /// @dev hashes are taken word by word (8 bytes by 8 bytes)\\n    function getMerkleRootFromBytes(bytes calldata _data, uint8 _log2Size)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        require(_log2Size >= 3, \\\"Must be at least a word\\\");\\n        require(_log2Size <= 64, \\\"Cannot be bigger than the machine itself\\\");\\n\\n        // if _data is empty return pristine drive of size log2size\\n        if (_data.length == 0) return getEmptyTreeHashAtIndex(_log2Size - 3);\\n\\n        // total size of the drive in words\\n        uint256 size = 1 << uint256(_log2Size - 3);\\n        require(\\n            size << L_WORD_SIZE >= _data.length,\\n            \\\"data is bigger than drive\\\"\\n        );\\n        // the stack depth is log2(_data.length / 8) + 2\\n        uint256 stack_depth =\\n            2 + ((_data.length) >> L_WORD_SIZE).getLog2Floor();\\n        bytes32[] memory stack = new bytes32[](stack_depth);\\n\\n        uint256 numOfHashes; // total number of hashes on stack (counting levels)\\n        uint256 stackLength; // total length of stack\\n        uint256 numOfJoins; // number of hashes of the same level on stack\\n        uint256 topStackLevel; // hash level of the top of the stack\\n\\n        while (numOfHashes < size) {\\n            if ((numOfHashes << L_WORD_SIZE) < _data.length) {\\n                // we still have words to hash\\n                stack[stackLength] = getHashOfWordAtIndex(_data, numOfHashes);\\n                numOfHashes++;\\n\\n                numOfJoins = numOfHashes;\\n            } else {\\n                // since padding happens in hashOfWordAtIndex function\\n                // we only need to complete the stack with pre-computed\\n                // hash(0), hash(hash(0),hash(0)) and so on\\n                topStackLevel = numOfHashes.ctz();\\n\\n                stack[stackLength] = getEmptyTreeHashAtIndex(topStackLevel);\\n\\n                //Empty Tree Hash summarizes many hashes\\n                numOfHashes = numOfHashes + (1 << topStackLevel);\\n                numOfJoins = numOfHashes >> topStackLevel;\\n            }\\n\\n            stackLength++;\\n\\n            // while there are joins, hash top of stack together\\n            while (numOfJoins & 1 == 0) {\\n                bytes32 h2 = stack[stackLength - 1];\\n                bytes32 h1 = stack[stackLength - 2];\\n\\n                stack[stackLength - 2] = keccak256(abi.encodePacked(h1, h2));\\n                stackLength = stackLength - 1; // remove hashes from stack\\n\\n                numOfJoins = numOfJoins >> 1;\\n            }\\n        }\\n        require(\\n            stackLength == 1,\\n            \\\"function ended but stack has more than one element\\\"\\n        );\\n\\n        return stack[0];\\n    }\\n\\n    /// @notice Get the hash of a word in an array of bytes\\n    /// @param _data array of bytes\\n    /// @param _wordIndex index of word inside the bytes to get the hash of\\n    /// @dev if word is incomplete (< 8 bytes) it gets padded with zeroes\\n    function getHashOfWordAtIndex(bytes calldata _data, uint256 _wordIndex)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        uint256 start = _wordIndex << L_WORD_SIZE;\\n        uint256 end = start + (1 << L_WORD_SIZE);\\n\\n        // TODO: in .lua this just returns zero, but this might be more consistent\\n        require(start <= _data.length, \\\"word out of bounds\\\");\\n\\n        if (end <= _data.length) {\\n            return keccak256(abi.encodePacked(_data[start:end]));\\n        }\\n\\n        // word is incomplete\\n        // fill paddedSlice with incomplete words - the rest is going to be bytes(0)\\n        bytes memory paddedSlice = new bytes(8);\\n        uint256 remaining = _data.length - start;\\n\\n        for (uint256 i = 0; i < remaining; i++) {\\n            paddedSlice[i] = _data[start + i];\\n        }\\n\\n        return keccak256(paddedSlice);\\n    }\\n\\n    /// @notice Calculate the root of Merkle tree from an array of power of 2 elements\\n    /// @param hashes The array containing power of 2 elements\\n    /// @return byte32 the root hash being calculated\\n    function calculateRootFromPowerOfTwo(bytes32[] memory hashes)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        // revert when the input is not of power of 2\\n        require(\\n            (hashes.length).isPowerOf2(),\\n            \\\"The input array must contain power of 2 elements\\\"\\n        );\\n\\n        if (hashes.length == 1) {\\n            return hashes[0];\\n        } else {\\n            bytes32[] memory newHashes = new bytes32[](hashes.length >> 1);\\n\\n            for (uint256 i = 0; i < hashes.length; i += 2) {\\n                newHashes[i >> 1] = keccak256(\\n                    abi.encodePacked(hashes[i], hashes[i + 1])\\n                );\\n            }\\n\\n            return calculateRootFromPowerOfTwo(newHashes);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7593e7dda88e5bee5347abef5b5077ea1434c091819ad961b8a7cde10c6efa6d\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x611c2b61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100925760003560e01c806382b0eab81161006557806382b0eab8146100f55780638492d93b14610108578063a73426881461011b578063d7304dd91461012e57600080fd5b8063297081181461009757806334bd712d146100bc578063451a1055146100cf57806349fd2697146100e2575b600080fd5b6100aa6100a53660046111e5565b610141565b60405190815260200160405180910390f35b6100aa6100ca366004611048565b610460565b6100aa6100dd3660046110e5565b6105c9565b6100aa6100f0366004611091565b61065a565b6100aa610103366004610fee565b610b35565b6100aa610116366004611115565b610da3565b6100aa61012936600461125f565b610dee565b6100aa61013c36600461117e565b610ee4565b60008460ff168460ff1610156101ad5760405162461bcd60e51b815260206004820152602660248201527f5265706c6163656d656e7420626967676572207468616e206f726967696e616c60448201526520647269766560d01b60648201526084015b60405180910390fd5b60038560ff16101561020f5760405162461bcd60e51b815260206004820152602560248201527f5265706c6163656d656e74206d757374206265206174206c65617374206f6e65604482015264081ddbdc9960da1b60648201526084016101a4565b60408460ff16111561027e5760405162461bcd60e51b815260206004820152603260248201527f46756c6c2064726976652063616e277420626520626967676572207468616e206044820152713a34329036b0b1b434b7329034ba39b2b63360711b60648201526084016101a4565b600160ff861681901b908790610294908361138a565b166001600160401b03166000146102ed5760405162461bcd60e51b815260206004820152601760248201527f506f736974696f6e206973206e6f7420616c69676e656400000000000000000060448201526064016101a4565b6102f786866113b2565b60ff168351146103495760405162461bcd60e51b815260206004820152601b60248201527f50726f6f66206c656e67746820646f6573206e6f74206d61746368000000000060448201526064016101a4565b60005b8351816001600160401b03161015610454576001600160401b038281168183161b8916166103dd578484826001600160401b03168151811061039e57634e487b7160e01b600052603260045260246000fd5b60200260200101516040516020016103c0929190918252602082015260400190565b604051602081830303815290604052805190602001209450610442565b83816001600160401b03168151811061040657634e487b7160e01b600052603260045260246000fd5b602002602001015185604051602001610429929190918252602082015260400190565b6040516020818303038152906040528051906020012094505b8061044c816113f0565b91505061034c565b50929695505050505050565b6000600382901b81610473600883611317565b9050848211156104ba5760405162461bcd60e51b8152602060048201526012602482015271776f7264206f7574206f6620626f756e647360701b60448201526064016101a4565b8481116104fd576104cd818387896112ef565b6040516020016104de929190611297565b60405160208183030381529060405280519060200120925050506105c2565b604080516008808252818301909252600091602082018180368337019050509050600061052a8488611373565b905060005b818110156105b35788886105438388611317565b81811061056057634e487b7160e01b600052603260045260246000fd5b9050013560f81c60f81b83828151811061058a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350806105ab816113d5565b91505061052f565b50508051602090910120925050505b9392505050565b6000806105d7836020611354565b90506105e4816020611317565b6107a0101561062b5760405162461bcd60e51b8152602060048201526013602482015272696e646578206f7574206f6620626f756e647360681b60448201526064016101a4565b600080604051806107c001604052806107a081526020016114566107a091399290920160200151949350505050565b600060038260ff1610156106b05760405162461bcd60e51b815260206004820152601760248201527f4d757374206265206174206c65617374206120776f726400000000000000000060448201526064016101a4565b60408260ff1611156106d45760405162461bcd60e51b81526004016101a4906112a7565b826106f6576106ef6106e76003846113b2565b60ff166105c9565b90506105c2565b60006107036003846113b2565b60ff166001901b905084849050600382901b10156107635760405162461bcd60e51b815260206004820152601960248201527f6461746120697320626967676572207468616e2064726976650000000000000060448201526064016101a4565b6040516306c8e54b60e01b8152600385901c6004820152600090730A579D596f4C489aC47a6442Dc0a78caf917f5D2906306c8e54b9060240160206040518083038186803b1580156107b457600080fd5b505af41580156107c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ec919061127b565b6107f790600261132f565b60ff1690506000816001600160401b0381111561082457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561084d578160200160208202803683370190505b5090506000806000805b86841015610a9157600384901b8a11156108b6576108768b8b86610460565b85848151811061089657634e487b7160e01b600052603260045260246000fd5b6020908102919091010152836108ab816113d5565b945050839150610984565b60405163052dcf5f60e31b815260048101859052730A579D596f4C489aC47a6442Dc0a78caf917f5D29063296e7af89060240160206040518083038186803b15801561090157600080fd5b505af4158015610915573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093991906110fd565b9050610944816105c9565b85848151811061096457634e487b7160e01b600052603260045260246000fd5b602090810291909101015261097c6001821b85611317565b935083811c91505b8261098e816113d5565b9350505b60018216610a8c576000856109a8600186611373565b815181106109c657634e487b7160e01b600052603260045260246000fd5b602002602001015190506000866002866109e09190611373565b815181106109fe57634e487b7160e01b600052603260045260246000fd5b602002602001015190508082604051602001610a24929190918252602082015260400190565b6040516020818303038152906040528051906020012087600287610a489190611373565b81518110610a6657634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610a7c600186611373565b9450600184901c93505050610992565b610857565b82600114610afc5760405162461bcd60e51b815260206004820152603260248201527f66756e6374696f6e20656e6465642062757420737461636b20686173206d6f7260448201527119481d1a185b881bdb9948195b195b595b9d60721b60648201526084016101a4565b84600081518110610b1d57634e487b7160e01b600052603260045260246000fd5b60200260200101519750505050505050509392505050565b805160405163d82ae4b160e01b8152600091730A579D596f4C489aC47a6442Dc0a78caf917f5D29163d82ae4b191610b739160040190815260200190565b60206040518083038186803b158015610b8b57600080fd5b505af4158015610b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc39190611028565b610c285760405162461bcd60e51b815260206004820152603060248201527f54686520696e707574206172726179206d75737420636f6e7461696e20706f7760448201526f6572206f66203220656c656d656e747360801b60648201526084016101a4565b815160011415610c625781600081518110610c5357634e487b7160e01b600052603260045260246000fd5b60200260200101519050919050565b600060018351901c6001600160401b03811115610c8f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610cb8578160200160208202803683370190505b50905060005b8351811015610d9457838181518110610ce757634e487b7160e01b600052603260045260246000fd5b602002602001015184826001610cfd9190611317565b81518110610d1b57634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001610d3d929190918252602082015260400190565b6040516020818303038152906040528051906020012082600183901c81518110610d7757634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610d8d600282611317565b9050610cbe565b506105c281610b35565b919050565b6040516001600160c01b0319831660208201526000908190602801604051602081830303815290604052805190602001209050610de585600360408487610141565b95945050505050565b600060038260ff161015610e445760405162461bcd60e51b815260206004820152601b60248201527f48617320746f206265206174206c65617374206f6e6520776f7264000000000060448201526064016101a4565b60408260ff161115610e685760405162461bcd60e51b81526004016101a4906112a7565b60408051600060208083018290528351600881850301815260289093019093528151919092012060035b8460ff16811015610edc5760408051602081018490529081018390526060016040516020818303038152906040528051906020012091508080610ed4906113d5565b915050610e92565b509392505050565b6000610de5858560408686610141565b600082601f830112610f04578081fd5b813560206001600160401b0380831115610f2057610f2061142d565b8260051b604051601f19603f83011681018181108482111715610f4557610f4561142d565b60405284815283810192508684018288018501891015610f63578687fd5b8692505b85831015610f85578035845292840192600192909201918401610f67565b50979650505050505050565b60008083601f840112610fa2578182fd5b5081356001600160401b03811115610fb8578182fd5b602083019150836020828501011115610fd057600080fd5b9250929050565b80356001600160401b0381168114610d9e57600080fd5b600060208284031215610fff578081fd5b81356001600160401b03811115611014578182fd5b61102084828501610ef4565b949350505050565b600060208284031215611039578081fd5b815180151581146105c2578182fd5b60008060006040848603121561105c578182fd5b83356001600160401b03811115611071578283fd5b61107d86828701610f91565b909790965060209590950135949350505050565b6000806000604084860312156110a5578283fd5b83356001600160401b038111156110ba578384fd5b6110c686828701610f91565b90945092505060208401356110da81611443565b809150509250925092565b6000602082840312156110f6578081fd5b5035919050565b60006020828403121561110e578081fd5b5051919050565b600080600060608486031215611129578283fd5b61113284610fd7565b925060208401356001600160c01b03198116811461114e578283fd5b915060408401356001600160401b03811115611168578182fd5b61117486828701610ef4565b9150509250925092565b60008060008060808587031215611193578081fd5b61119c85610fd7565b935060208501356111ac81611443565b92506040850135915060608501356001600160401b038111156111cd578182fd5b6111d987828801610ef4565b91505092959194509250565b600080600080600060a086880312156111fc578081fd5b61120586610fd7565b9450602086013561121581611443565b9350604086013561122581611443565b92506060860135915060808601356001600160401b03811115611246578182fd5b61125288828901610ef4565b9150509295509295909350565b600060208284031215611270578081fd5b81356105c281611443565b60006020828403121561128c578081fd5b81516105c281611443565b8183823760009101908152919050565b60208082526028908201527f43616e6e6f7420626520626967676572207468616e20746865206d616368696e604082015267329034ba39b2b63360c11b606082015260800190565b600080858511156112fe578182fd5b8386111561130a578182fd5b5050820193919092039150565b6000821982111561132a5761132a611417565b500190565b600060ff821660ff84168060ff0382111561134c5761134c611417565b019392505050565b600081600019048311821515161561136e5761136e611417565b500290565b60008282101561138557611385611417565b500390565b60006001600160401b03838116908316818110156113aa576113aa611417565b039392505050565b600060ff821660ff8416808210156113cc576113cc611417565b90039392505050565b60006000198214156113e9576113e9611417565b5060010190565b60006001600160401b038083168181141561140d5761140d611417565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60ff8116811461145257600080fd5b5056fe011b4d03dd8c01f1049143cf9c4c817e4b167f1d1b83e5c6f0f10d89ba1e7bce4d9470a821fbe90117ec357e30bad9305732fb19ddf54a07dd3e29f440619254ae39ce8537aca75e2eff3e38c98011dfe934e700a0967732fc07b430dd656a233fc9a15f5b4869c872f81087bb6104b7d63e6f9ab47f2c43f3535eae7172aa7f17d2dd614cddaa4d879276b11e0672c9560033d3e8453a1d045339d34ba601b9c37b8b13ca95166fb7af16988a70fcc90f38bf9126fd833da710a47fb37a55e68e7a427fa943d9966b389f4f257173676090c6e95f43e2cb6d65f8758111e30930b0b9deb73e155c59740bacf14a6ff04b64bb8e201a506409c3fe381ca4ea90cd5deac729d0fdaccc441d09d7325f41586ba13c801b7eccae0f95d8f3933efed8b96e5b7f6f459e9cb6a2f41bf276c7b85c10cd4662c04cbbb365434726c0a0c9695393027fb106a8153109ac516288a88b28a93817899460d6310b71cf1e6163e8806fa0d4b197a259e8c3ac28864268159d0ac85f8581ca28fa7d2c0c03eb91e3eee5ca7a3da2b3053c9770db73599fb149f620e3facef95e947c0ee860b72122e31e4bbd2b7c783d79cc30f60c6238651da7f0726f767d22747264fdb046f7549f26cc70ed5e18baeb6c81bb0625cb95bb4019aeecd40774ee87ae29ec517a71f6ee264c5d761379b3d7d617ca83677374b49d10aec50505ac087408ca892b573c267a712a52e1d06421fe276a03efb1889f337201110fdc32a81f8e152499af665835aabfdc6740c7e2c3791a31c3cdc9f5ab962f681b12fc092816a62f27d86025599a41233848702f0cfc0437b445682df51147a632a0a083d2d38b5e13e466a8935afff58bb533b3ef5d27fba63ee6b0fd9e67ff20af9d50deee3f8bf065ec220c1fd4ba57e341261d55997f85d66d32152526736872693d2b437a233e2337b715f6ac9a6a272622fdc2d67fcfe1da3459f8dab4ed7e40a657a54c36766c5e8ac9a88b35b05c34747e6507f6b044ab66180dc76ac1a696de03189593fedc0d0dbbd855c8ead673544899b0960e4a5a7ca43b4ef90afe607de7698caefdc242788f654b57a4fb32a71b335ef6ff9a4cc118b282b53bdd6d6192b7a82c3c5126b9c7e33c8e5a5ac9738b8bd31247fb7402054f97b573e8abb9faad219f4fd085aceaa7f542d787ee4196d365f3cc566e7bbcfbfd451230c48d804c017d21e2d8fa914e2559bb72bf0ab78c8ab92f00ef0d0d576eccdd486b64138a4172674857e543d1d5b639058dd908186597e366ad5f3d9c7ceaff44d04d1550b8d33abc751df07437834ba5acb32328a396994aebb3c40f759c2d6d7a3cb5377e55d5d218ef5a296dda8ddc355f3f50c3d0b660a51dfa4d98a6a5a33564556cf83c1373a814641d6a1dcef97b883fee61bb84fe60a3409340217e629cc7e4dcc93b85d8820921ff5826148b60e6939acd7838e1d7f20562bff8ee4b5ec4a05ad997a57b9796fdcb2eda87883c2640b072b140b946bfdf6575cacc066fdae04f6951e63624cbd316a677cad529bbe4e97b9144e4bc06c4afd1de55dd3e1175f90423847a230d34dfb71ed56f2965a7f6c72e6aa33c24c303fd67745d632656c5ef90bec80f4f5d1daa251988826cef375c81c36bf457e09687056f924677cb0bccf98dff81e014ce25f2d132497923e267363963cdf4302c5049d63131dc03fd95f65d8b6aa5934f817252c028c90f56d413b9d5d10d89790707dae2fabb249f649929927c21dd71e3f656826de5451c5da375aadecbd59d5ebf3a31fae65ac1b316a1611f1b276b26530f58d7247df459ce1f86db1d734f6f811932f042cee45d0e455306d01081bc3384f82c5fb2aacaa19d89cdfa46cc916eac61121475ba2e6191b4feecbe1789717021a158ace5d06744b40f551076b67cd63af60007f8c99876e1424883a45ec49d497ddaf808a5521ca74a999ab0b3c7aa9c80f85e93977ec61ce68b20307a1a81f71ca645b568fcd319ccbb5f651e87b707d37c39e15f945ea69e2f7c7d2ccc85b7e654c07e96f0636ae4044fe0e38590b431795ad0f8647bdd613713ada493cc17efd313206380e6a685b8198475bbd021c6e9d94daab2214947127506073e44d5408ba166c512a0b86805d07f5a44d3c41706be2bc15e712e55805248b92e8677d90f6d284d1d6ffaff2c430657042a0e82624fa3717b06cc0a6fd12230ea586dae83019fb9e06034ed2803c98d554b93c9a52348cafff75c40174a91f9ae6b8647854a156029f0b88b83316663ce574a4978277bb6bb27a31085634b6ec78864b6d8201c7e93903d75815067e378289a3d072ae172dafa6a452470f8d645bebfad9779594fc0784bb764a22e3a8181d93db7bf97893c414217a618ccb14caa9e92e8c61673afc9583662e812adba1f87a9c68202d60e909efab43c42c0cb00695fc7f1ffe67c75ca894c3c51e1e5e731360199e600f6ced9a87b2a6a87e70bf251bb5075ab222138288164b2eda727515ea7de12e2496d4fe42ea8d1a120c03cf9c50622c2afe4acb0dad98fd62d07ab4e828a94495f6d1ab973982c7ccbe6c1fae02788e4422ae22282fa49cbdb04ba54a7a238c6fc41187451383460762c06d1c8a72b9cd718866ad4b689e10c9a8c38fe5ef045bd785b01e980fc82c7e3532ce81876b778dd9f1ceeba4478e86411fb6fdd790683916ca832592485093644e8760cd7b4c01dba1ccc82b661bf13f0e3f34acd6b88a2646970667358221220813b9a38cd5e0772b16f859d9a66ce6200c68281ffac8c91413c40f7bf8e5d8c64736f6c63430008040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100925760003560e01c806382b0eab81161006557806382b0eab8146100f55780638492d93b14610108578063a73426881461011b578063d7304dd91461012e57600080fd5b8063297081181461009757806334bd712d146100bc578063451a1055146100cf57806349fd2697146100e2575b600080fd5b6100aa6100a53660046111e5565b610141565b60405190815260200160405180910390f35b6100aa6100ca366004611048565b610460565b6100aa6100dd3660046110e5565b6105c9565b6100aa6100f0366004611091565b61065a565b6100aa610103366004610fee565b610b35565b6100aa610116366004611115565b610da3565b6100aa61012936600461125f565b610dee565b6100aa61013c36600461117e565b610ee4565b60008460ff168460ff1610156101ad5760405162461bcd60e51b815260206004820152602660248201527f5265706c6163656d656e7420626967676572207468616e206f726967696e616c60448201526520647269766560d01b60648201526084015b60405180910390fd5b60038560ff16101561020f5760405162461bcd60e51b815260206004820152602560248201527f5265706c6163656d656e74206d757374206265206174206c65617374206f6e65604482015264081ddbdc9960da1b60648201526084016101a4565b60408460ff16111561027e5760405162461bcd60e51b815260206004820152603260248201527f46756c6c2064726976652063616e277420626520626967676572207468616e206044820152713a34329036b0b1b434b7329034ba39b2b63360711b60648201526084016101a4565b600160ff861681901b908790610294908361138a565b166001600160401b03166000146102ed5760405162461bcd60e51b815260206004820152601760248201527f506f736974696f6e206973206e6f7420616c69676e656400000000000000000060448201526064016101a4565b6102f786866113b2565b60ff168351146103495760405162461bcd60e51b815260206004820152601b60248201527f50726f6f66206c656e67746820646f6573206e6f74206d61746368000000000060448201526064016101a4565b60005b8351816001600160401b03161015610454576001600160401b038281168183161b8916166103dd578484826001600160401b03168151811061039e57634e487b7160e01b600052603260045260246000fd5b60200260200101516040516020016103c0929190918252602082015260400190565b604051602081830303815290604052805190602001209450610442565b83816001600160401b03168151811061040657634e487b7160e01b600052603260045260246000fd5b602002602001015185604051602001610429929190918252602082015260400190565b6040516020818303038152906040528051906020012094505b8061044c816113f0565b91505061034c565b50929695505050505050565b6000600382901b81610473600883611317565b9050848211156104ba5760405162461bcd60e51b8152602060048201526012602482015271776f7264206f7574206f6620626f756e647360701b60448201526064016101a4565b8481116104fd576104cd818387896112ef565b6040516020016104de929190611297565b60405160208183030381529060405280519060200120925050506105c2565b604080516008808252818301909252600091602082018180368337019050509050600061052a8488611373565b905060005b818110156105b35788886105438388611317565b81811061056057634e487b7160e01b600052603260045260246000fd5b9050013560f81c60f81b83828151811061058a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350806105ab816113d5565b91505061052f565b50508051602090910120925050505b9392505050565b6000806105d7836020611354565b90506105e4816020611317565b6107a0101561062b5760405162461bcd60e51b8152602060048201526013602482015272696e646578206f7574206f6620626f756e647360681b60448201526064016101a4565b600080604051806107c001604052806107a081526020016114566107a091399290920160200151949350505050565b600060038260ff1610156106b05760405162461bcd60e51b815260206004820152601760248201527f4d757374206265206174206c65617374206120776f726400000000000000000060448201526064016101a4565b60408260ff1611156106d45760405162461bcd60e51b81526004016101a4906112a7565b826106f6576106ef6106e76003846113b2565b60ff166105c9565b90506105c2565b60006107036003846113b2565b60ff166001901b905084849050600382901b10156107635760405162461bcd60e51b815260206004820152601960248201527f6461746120697320626967676572207468616e2064726976650000000000000060448201526064016101a4565b6040516306c8e54b60e01b8152600385901c600482015260009073__$8b7ebe2a69e01741840a6648963dfd5409$__906306c8e54b9060240160206040518083038186803b1580156107b457600080fd5b505af41580156107c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ec919061127b565b6107f790600261132f565b60ff1690506000816001600160401b0381111561082457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561084d578160200160208202803683370190505b5090506000806000805b86841015610a9157600384901b8a11156108b6576108768b8b86610460565b85848151811061089657634e487b7160e01b600052603260045260246000fd5b6020908102919091010152836108ab816113d5565b945050839150610984565b60405163052dcf5f60e31b81526004810185905273__$8b7ebe2a69e01741840a6648963dfd5409$__9063296e7af89060240160206040518083038186803b15801561090157600080fd5b505af4158015610915573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093991906110fd565b9050610944816105c9565b85848151811061096457634e487b7160e01b600052603260045260246000fd5b602090810291909101015261097c6001821b85611317565b935083811c91505b8261098e816113d5565b9350505b60018216610a8c576000856109a8600186611373565b815181106109c657634e487b7160e01b600052603260045260246000fd5b602002602001015190506000866002866109e09190611373565b815181106109fe57634e487b7160e01b600052603260045260246000fd5b602002602001015190508082604051602001610a24929190918252602082015260400190565b6040516020818303038152906040528051906020012087600287610a489190611373565b81518110610a6657634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610a7c600186611373565b9450600184901c93505050610992565b610857565b82600114610afc5760405162461bcd60e51b815260206004820152603260248201527f66756e6374696f6e20656e6465642062757420737461636b20686173206d6f7260448201527119481d1a185b881bdb9948195b195b595b9d60721b60648201526084016101a4565b84600081518110610b1d57634e487b7160e01b600052603260045260246000fd5b60200260200101519750505050505050509392505050565b805160405163d82ae4b160e01b815260009173__$8b7ebe2a69e01741840a6648963dfd5409$",
  "libraries": {
    "CartesiMath": "0x0A579D596f4C489aC47a6442Dc0a78caf917f5D2"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateRootFromPowerOfTwo(bytes32[])": {
        "params": {
          "hashes": "The array containing power of 2 elements"
        },
        "returns": {
          "_0": "byte32 the root hash being calculated"
        }
      },
      "getEmptyTreeHashAtIndex(uint256)": {
        "details": "first index is keccak(0), second index is keccak(keccak(0), keccak(0))",
        "params": {
          "_index": "of hash wanted"
        }
      },
      "getHashOfWordAtIndex(bytes,uint256)": {
        "details": "if word is incomplete (< 8 bytes) it gets padded with zeroes",
        "params": {
          "_data": "array of bytes",
          "_wordIndex": "index of word inside the bytes to get the hash of"
        }
      },
      "getMerkleRootFromBytes(bytes,uint8)": {
        "details": "_data is padded with zeroes until is multiple of 8root is completed with zero tree until log2size is completehashes are taken word by word (8 bytes by 8 bytes)",
        "params": {
          "_data": "array of bytes to be merklelized",
          "_log2Size": "log2 of total size of the drive"
        }
      },
      "getPristineHash(uint8)": {
        "details": "using the precomputed EMPTY_TREE_HASHES is cheaper",
        "params": {
          "_log2Size": "log2 of size of the empty drive"
        },
        "returns": {
          "_0": "merkle root hash of the drive of size 1 << log2Size filled with zeros"
        }
      },
      "getRoot(uint64,bytes8,bytes32[])": {
        "params": {
          "_position": "position of word in drive",
          "_value": "word to include in drive",
          "proof": "array of siblings to generate merkle root"
        },
        "returns": {
          "_0": "new merkle root hash after _value inclusion"
        }
      },
      "getRootAfterReplacementInDrive(uint64,uint8,uint8,bytes32,bytes32[])": {
        "params": {
          "_logSizeOfFullDrive": "log2 of size the full drive, which can be the entire machine",
          "_logSizeOfReplacement": "log2 of size the replacement",
          "_position": "position of _drive",
          "_replacement": "hash of the replacement",
          "siblings": "of replacement that merkle root can be calculated"
        }
      },
      "getRootWithDrive(uint64,uint8,bytes32,bytes32[])": {
        "params": {
          "_drive": "drive to be included",
          "_logOfSize": "log2 of size of _drive",
          "_position": "position of _drive",
          "siblings": "_drive's so that merkle root can be calculated"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateRootFromPowerOfTwo(bytes32[])": {
        "notice": "Calculate the root of Merkle tree from an array of power of 2 elements"
      },
      "getEmptyTreeHashAtIndex(uint256)": {
        "notice": "Gets precomputed hash of zero in empty tree hashes"
      },
      "getHashOfWordAtIndex(bytes,uint256)": {
        "notice": "Get the hash of a word in an array of bytes"
      },
      "getMerkleRootFromBytes(bytes,uint8)": {
        "notice": "get merkle root of generic array of bytes"
      },
      "getPristineHash(uint8)": {
        "notice": "Gets the pristine hash of a drive full of zeroes"
      },
      "getRoot(uint64,bytes8,bytes32[])": {
        "notice": "Gets merkle root of drive with _value on _position"
      },
      "getRootAfterReplacementInDrive(uint64,uint8,uint8,bytes32,bytes32[])": {
        "notice": "Gets merkle root hash of drive with a replacement"
      },
      "getRootWithDrive(uint64,uint8,bytes32,bytes32[])": {
        "notice": "Gets merkle root hash of machine with drive _drive"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}