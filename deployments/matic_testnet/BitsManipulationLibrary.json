{
  "address": "0xB655fafF2C7d47C4c37C11aC607059b120d54147",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "int32",
          "name": "number",
          "type": "int32"
        },
        {
          "internalType": "uint32",
          "name": "wordSize",
          "type": "uint32"
        }
      ],
      "name": "int32SignExtension",
      "outputs": [
        {
          "internalType": "int32",
          "name": "",
          "type": "int32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "num",
          "type": "uint32"
        }
      ],
      "name": "uint32SwapEndian",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "number",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "wordSize",
          "type": "uint64"
        }
      ],
      "name": "uint64SignExtension",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "num",
          "type": "uint64"
        }
      ],
      "name": "uint64SwapEndian",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x986c609749d56e96541ec9a23ffcd5674f7647d2252a9625dd9b19b8a8025c1a",
  "receipt": {
    "to": null,
    "from": "0x18930e8a66a1DbE21D00581216789AAB7460Afd0",
    "contractAddress": "0xB655fafF2C7d47C4c37C11aC607059b120d54147",
    "transactionIndex": 0,
    "gasUsed": "324439",
    "logsBloom": "0x
    "blockHash": "0xbd98bbe03d7ace1c6069db8a1f01f05f6aa44e1175d1e0c19394552103421ed8",
    "transactionHash": "0x986c609749d56e96541ec9a23ffcd5674f7647d2252a9625dd9b19b8a8025c1a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12943403,
        "transactionHash": "0x986c609749d56e96541ec9a23ffcd5674f7647d2252a9625dd9b19b8a8025c1a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000018930e8a66a1dbe21d00581216789aab7460afd0",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002294443c6374000000000000000000000000000000000000000000000000001a2abdab4f9202000000000000000000000000000000000000000000000000484c26d0cc44bd56950000000000000000000000000000000000000000000000001a082967132e8e000000000000000000000000000000000000000000000000484c4965108120ca95",
        "logIndex": 0,
        "blockHash": "0xbd98bbe03d7ace1c6069db8a1f01f05f6aa44e1175d1e0c19394552103421ed8"
      }
    ],
    "blockNumber": 12943403,
    "cumulativeGasUsed": "324439",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a90be13359a9fbe9671aea54a4ec33bb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int32\",\"name\":\"number\",\"type\":\"int32\"},{\"internalType\":\"uint32\",\"name\":\"wordSize\",\"type\":\"uint32\"}],\"name\":\"int32SignExtension\",\"outputs\":[{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"num\",\"type\":\"uint32\"}],\"name\":\"uint32SwapEndian\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"number\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"wordSize\",\"type\":\"uint64\"}],\"name\":\"uint64SignExtension\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"num\",\"type\":\"uint64\"}],\"name\":\"uint64SwapEndian\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Felipe Argento / Stephen Chen\",\"kind\":\"dev\",\"methods\":{\"int32SignExtension(int32,uint32)\":{\"params\":{\"number\":\"signed number to be extended\",\"wordSize\":\"number of bits of the signed number, ie, 8 for int8\"}},\"uint32SwapEndian(uint32)\":{\"params\":{\"num\":\"number to have bytes swapped\"}},\"uint64SignExtension(uint64,uint64)\":{\"params\":{\"number\":\"signed number to be extended\",\"wordSize\":\"number of bits of the signed number, ie, 8 for int8\"}},\"uint64SwapEndian(uint64)\":{\"params\":{\"num\":\"number to have bytes swapped\"}}},\"title\":\"Bits Manipulation Library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"int32SignExtension(int32,uint32)\":{\"notice\":\"Sign extend a shorter signed value to the full int32\"},\"uint32SwapEndian(uint32)\":{\"notice\":\"Swap byte order of unsigned ints with 32 bytes\"},\"uint64SignExtension(uint64,uint64)\":{\"notice\":\"Sign extend a shorter signed value to the full uint64\"},\"uint64SwapEndian(uint64)\":{\"notice\":\"Swap byte order of unsigned ints with 64 bytes\"}},\"notice\":\"Implements bit manipulation helper functions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BitsManipulationLibrary.sol\":\"BitsManipulationLibrary\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BitsManipulationLibrary.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\n\\n/// @title Bits Manipulation Library\\n/// @author Felipe Argento / Stephen Chen\\n/// @notice Implements bit manipulation helper functions\\nlibrary BitsManipulationLibrary {\\n\\n    /// @notice Sign extend a shorter signed value to the full int32\\n    /// @param number signed number to be extended\\n    /// @param wordSize number of bits of the signed number, ie, 8 for int8\\n    function int32SignExtension(int32 number, uint32 wordSize)\\n    public pure returns(int32)\\n    {\\n        uint32 uNumber = uint32(number);\\n        bool isNegative = ((uint64(1) << (wordSize - 1)) & uNumber) > 0;\\n        uint32 mask = ((uint32(2) ** wordSize) - 1);\\n\\n        if (isNegative) {\\n            uNumber = uNumber | ~mask;\\n        }\\n\\n        return int32(uNumber);\\n    }\\n\\n    /// @notice Sign extend a shorter signed value to the full uint64\\n    /// @param number signed number to be extended\\n    /// @param wordSize number of bits of the signed number, ie, 8 for int8\\n    function uint64SignExtension(uint64 number, uint64 wordSize)\\n    public pure returns(uint64)\\n    {\\n        uint64 uNumber = number;\\n        bool isNegative = ((uint64(1) << (wordSize - 1)) & uNumber) > 0;\\n        uint64 mask = ((uint64(2) ** wordSize) - 1);\\n\\n        if (isNegative) {\\n            uNumber = uNumber | ~mask;\\n        }\\n\\n        return uNumber;\\n    }\\n\\n    /// @notice Swap byte order of unsigned ints with 64 bytes\\n    /// @param num number to have bytes swapped\\n    function uint64SwapEndian(uint64 num) public pure returns(uint64) {\\n        uint64 output = ((num & 0x00000000000000ff) << 56)|\\n            ((num & 0x000000000000ff00) << 40)|\\n            ((num & 0x0000000000ff0000) << 24)|\\n            ((num & 0x00000000ff000000) << 8) |\\n            ((num & 0x000000ff00000000) >> 8) |\\n            ((num & 0x0000ff0000000000) >> 24)|\\n            ((num & 0x00ff000000000000) >> 40)|\\n            ((num & 0xff00000000000000) >> 56);\\n\\n        return output;\\n    }\\n\\n    /// @notice Swap byte order of unsigned ints with 32 bytes\\n    /// @param num number to have bytes swapped\\n    function uint32SwapEndian(uint32 num) public pure returns(uint32) {\\n        uint32 output = ((num >> 24) & 0xff) | ((num << 8) & 0xff0000) | ((num >> 8) & 0xff00) | ((num << 24) & 0xff000000);\\n        return output;\\n    }\\n}\\n\\n\",\"keccak256\":\"0xa2a260be207dd1ecaa10d241874185b7fa929cbaf615b1bd0bfd033bbcfa7987\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6104e861003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c8063240034ec1461005b578063bf1924c514610088578063ef7c794914610128578063f69c389b1461013b575b600080fd5b61006e6100693660046102b8565b610161565b60405163ffffffff90911681526020015b60405180910390f35b61010f6100963660046102d9565b603881811b67ff0000000000000016602883811b66ff0000000000001691909117601884811b65ff00000000001691909117600885811b64ff00000000169190911763ff0000009186901c919091161762ff00009185901c919091161761ff009184901c919091161760ff9183901c9190911617919050565b60405167ffffffffffffffff909116815260200161007f565b61010f6101363660046102f3565b610194565b61014e61014936600461027f565b6101ff565b60405160039190910b815260200161007f565b601881811b63ff00000016600883811c61ff00169084901b62ff0000169284901c60ff169290921791909117175b919050565b6000828180826101a560018761047f565b67ffffffffffffffff16600167ffffffffffffffff16901b1667ffffffffffffffff16119050600060018560026101dc9190610380565b6101e6919061047f565b905081156101f5578019831792505b5090949350505050565b600082818063ffffffff831661021660018761045a565b63ffffffff16600167ffffffffffffffff16901b1667ffffffffffffffff16119050600060018560026102499190610362565b6101e6919061045a565b803563ffffffff8116811461018f57600080fd5b803567ffffffffffffffff8116811461018f57600080fd5b60008060408385031215610291578182fd5b82358060030b81146102a1578283fd5b91506102af60208401610253565b90509250929050565b6000602082840312156102c9578081fd5b6102d282610253565b9392505050565b6000602082840312156102ea578081fd5b6102d282610267565b60008060408385031215610305578182fd5b61030e83610267565b91506102af60208401610267565b80825b600180861161032e5750610359565b8187048211156103405761034061049c565b8086161561034d57918102915b9490941c93800261031f565b94509492505050565b600063ffffffff61037881828616838616610396565b949350505050565b600067ffffffffffffffff610378818286168386165b6000826103a5575060016102d2565b816103b2575060006102d2565b81600181146103c857600281146103d2576103ff565b60019150506102d2565b60ff8411156103e3576103e361049c565b6001841b9150848211156103f9576103f961049c565b506102d2565b5060208310610133831016604e8410600b8410161715610432575081810a8381111561042d5761042d61049c565b6102d2565b61043f848484600161031c565b8086048211156104515761045161049c565b02949350505050565b600063ffffffff838116908316818110156104775761047761049c565b039392505050565b600067ffffffffffffffff83811690831681811015610477576104775b634e487b7160e01b600052601160045260246000fdfea26469706673582212204f095aefa9b14fd76ecbd06f672278306c8c8357ab7ce1e6394adfda13b55d6364736f6c63430008030033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c8063240034ec1461005b578063bf1924c514610088578063ef7c794914610128578063f69c389b1461013b575b600080fd5b61006e6100693660046102b8565b610161565b60405163ffffffff90911681526020015b60405180910390f35b61010f6100963660046102d9565b603881811b67ff0000000000000016602883811b66ff0000000000001691909117601884811b65ff00000000001691909117600885811b64ff00000000169190911763ff0000009186901c919091161762ff00009185901c919091161761ff009184901c919091161760ff9183901c9190911617919050565b60405167ffffffffffffffff909116815260200161007f565b61010f6101363660046102f3565b610194565b61014e61014936600461027f565b6101ff565b60405160039190910b815260200161007f565b601881811b63ff00000016600883811c61ff00169084901b62ff0000169284901c60ff169290921791909117175b919050565b6000828180826101a560018761047f565b67ffffffffffffffff16600167ffffffffffffffff16901b1667ffffffffffffffff16119050600060018560026101dc9190610380565b6101e6919061047f565b905081156101f5578019831792505b5090949350505050565b600082818063ffffffff831661021660018761045a565b63ffffffff16600167ffffffffffffffff16901b1667ffffffffffffffff16119050600060018560026102499190610362565b6101e6919061045a565b803563ffffffff8116811461018f57600080fd5b803567ffffffffffffffff8116811461018f57600080fd5b60008060408385031215610291578182fd5b82358060030b81146102a1578283fd5b91506102af60208401610253565b90509250929050565b6000602082840312156102c9578081fd5b6102d282610253565b9392505050565b6000602082840312156102ea578081fd5b6102d282610267565b60008060408385031215610305578182fd5b61030e83610267565b91506102af60208401610267565b80825b600180861161032e5750610359565b8187048211156103405761034061049c565b8086161561034d57918102915b9490941c93800261031f565b94509492505050565b600063ffffffff61037881828616838616610396565b949350505050565b600067ffffffffffffffff610378818286168386165b6000826103a5575060016102d2565b816103b2575060006102d2565b81600181146103c857600281146103d2576103ff565b60019150506102d2565b60ff8411156103e3576103e361049c565b6001841b9150848211156103f9576103f961049c565b506102d2565b5060208310610133831016604e8410600b8410161715610432575081810a8381111561042d5761042d61049c565b6102d2565b61043f848484600161031c565b8086048211156104515761045161049c565b02949350505050565b600063ffffffff838116908316818110156104775761047761049c565b039392505050565b600067ffffffffffffffff83811690831681811015610477576104775b634e487b7160e01b600052601160045260246000fdfea26469706673582212204f095aefa9b14fd76ecbd06f672278306c8c8357ab7ce1e6394adfda13b55d6364736f6c63430008030033",
  "devdoc": {
    "author": "Felipe Argento / Stephen Chen",
    "kind": "dev",
    "methods": {
      "int32SignExtension(int32,uint32)": {
        "params": {
          "number": "signed number to be extended",
          "wordSize": "number of bits of the signed number, ie, 8 for int8"
        }
      },
      "uint32SwapEndian(uint32)": {
        "params": {
          "num": "number to have bytes swapped"
        }
      },
      "uint64SignExtension(uint64,uint64)": {
        "params": {
          "number": "signed number to be extended",
          "wordSize": "number of bits of the signed number, ie, 8 for int8"
        }
      },
      "uint64SwapEndian(uint64)": {
        "params": {
          "num": "number to have bytes swapped"
        }
      }
    },
    "title": "Bits Manipulation Library",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "int32SignExtension(int32,uint32)": {
        "notice": "Sign extend a shorter signed value to the full int32"
      },
      "uint32SwapEndian(uint32)": {
        "notice": "Swap byte order of unsigned ints with 32 bytes"
      },
      "uint64SignExtension(uint64,uint64)": {
        "notice": "Sign extend a shorter signed value to the full uint64"
      },
      "uint64SwapEndian(uint64)": {
        "notice": "Swap byte order of unsigned ints with 64 bytes"
      }
    },
    "notice": "Implements bit manipulation helper functions",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}