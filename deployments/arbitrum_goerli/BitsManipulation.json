{
  "address": "0x91E780568A1FEdd5d01E1c1E4cAed68E3a849345",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "int32",
          "name": "number",
          "type": "int32"
        },
        {
          "internalType": "uint32",
          "name": "wordSize",
          "type": "uint32"
        }
      ],
      "name": "int32SignExtension",
      "outputs": [
        {
          "internalType": "int32",
          "name": "",
          "type": "int32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "num",
          "type": "uint32"
        }
      ],
      "name": "uint32SwapEndian",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "number",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "wordSize",
          "type": "uint64"
        }
      ],
      "name": "uint64SignExtension",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "num",
          "type": "uint64"
        }
      ],
      "name": "uint64SwapEndian",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xcb8343eef70467876329cabb4d8a770f9d72c296b745f4e334b789ba8264d032",
  "receipt": {
    "to": null,
    "from": "0x18930e8a66a1DbE21D00581216789AAB7460Afd0",
    "contractAddress": "0x91E780568A1FEdd5d01E1c1E4cAed68E3a849345",
    "transactionIndex": 1,
    "gasUsed": "377537",
    "logsBloom": "0x
    "blockHash": "0x9a7c0ae64159984d81c1c2c0cfca83338d5652a0fdd802b79a6ee0aaebf9c935",
    "transactionHash": "0xcb8343eef70467876329cabb4d8a770f9d72c296b745f4e334b789ba8264d032",
    "logs": [],
    "blockNumber": 151981,
    "cumulativeGasUsed": "377537",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fae7314c66b31753e5e29e8fe977a227",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int32\",\"name\":\"number\",\"type\":\"int32\"},{\"internalType\":\"uint32\",\"name\":\"wordSize\",\"type\":\"uint32\"}],\"name\":\"int32SignExtension\",\"outputs\":[{\"internalType\":\"int32\",\"name\":\"\",\"type\":\"int32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"num\",\"type\":\"uint32\"}],\"name\":\"uint32SwapEndian\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"number\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"wordSize\",\"type\":\"uint64\"}],\"name\":\"uint64SignExtension\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"num\",\"type\":\"uint64\"}],\"name\":\"uint64SwapEndian\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Felipe Argento / Stephen Chen\",\"kind\":\"dev\",\"methods\":{\"int32SignExtension(int32,uint32)\":{\"params\":{\"number\":\"signed number to be extended\",\"wordSize\":\"number of bits of the signed number, ie, 8 for int8\"}},\"uint32SwapEndian(uint32)\":{\"params\":{\"num\":\"number to have bytes swapped\"}},\"uint64SignExtension(uint64,uint64)\":{\"params\":{\"number\":\"signed number to be extended\",\"wordSize\":\"number of bits of the signed number, ie, 8 for int8\"}},\"uint64SwapEndian(uint64)\":{\"params\":{\"num\":\"number to have bytes swapped\"}}},\"title\":\"Bits Manipulation Library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"int32SignExtension(int32,uint32)\":{\"notice\":\"Sign extend a shorter signed value to the full int32\"},\"uint32SwapEndian(uint32)\":{\"notice\":\"Swap byte order of unsigned ints with 32 bytes\"},\"uint64SignExtension(uint64,uint64)\":{\"notice\":\"Sign extend a shorter signed value to the full uint64\"},\"uint64SwapEndian(uint64)\":{\"notice\":\"Swap byte order of unsigned ints with 64 bytes\"}},\"notice\":\"Implements bit manipulation helper functions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BitsManipulation.sol\":\"BitsManipulation\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BitsManipulation.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\n\\n/// @title Bits Manipulation Library\\n/// @author Felipe Argento / Stephen Chen\\n/// @notice Implements bit manipulation helper functions\\nlibrary BitsManipulation {\\n\\n    /// @notice Sign extend a shorter signed value to the full int32\\n    /// @param number signed number to be extended\\n    /// @param wordSize number of bits of the signed number, ie, 8 for int8\\n    function int32SignExtension(int32 number, uint32 wordSize)\\n    public pure returns(int32)\\n    {\\n        uint32 uNumber = uint32(number);\\n        bool isNegative = ((uint64(1) << (wordSize - 1)) & uNumber) > 0;\\n        uint32 mask = ((uint32(2) ** wordSize) - 1);\\n\\n        if (isNegative) {\\n            uNumber = uNumber | ~mask;\\n        }\\n\\n        return int32(uNumber);\\n    }\\n\\n    /// @notice Sign extend a shorter signed value to the full uint64\\n    /// @param number signed number to be extended\\n    /// @param wordSize number of bits of the signed number, ie, 8 for int8\\n    function uint64SignExtension(uint64 number, uint64 wordSize)\\n    public pure returns(uint64)\\n    {\\n        uint64 uNumber = number;\\n        bool isNegative = ((uint64(1) << (wordSize - 1)) & uNumber) > 0;\\n        uint64 mask = ((uint64(2) ** wordSize) - 1);\\n\\n        if (isNegative) {\\n            uNumber = uNumber | ~mask;\\n        }\\n\\n        return uNumber;\\n    }\\n\\n    /// @notice Swap byte order of unsigned ints with 64 bytes\\n    /// @param num number to have bytes swapped\\n    function uint64SwapEndian(uint64 num) public pure returns(uint64) {\\n        uint64 output = ((num & 0x00000000000000ff) << 56)|\\n            ((num & 0x000000000000ff00) << 40)|\\n            ((num & 0x0000000000ff0000) << 24)|\\n            ((num & 0x00000000ff000000) << 8) |\\n            ((num & 0x000000ff00000000) >> 8) |\\n            ((num & 0x0000ff0000000000) >> 24)|\\n            ((num & 0x00ff000000000000) >> 40)|\\n            ((num & 0xff00000000000000) >> 56);\\n\\n        return output;\\n    }\\n\\n    /// @notice Swap byte order of unsigned ints with 32 bytes\\n    /// @param num number to have bytes swapped\\n    function uint32SwapEndian(uint32 num) public pure returns(uint32) {\\n        uint32 output = ((num >> 24) & 0xff) | ((num << 8) & 0xff0000) | ((num >> 8) & 0xff00) | ((num << 24) & 0xff000000);\\n        return output;\\n    }\\n}\\n\\n\",\"keccak256\":\"0x09e8d9397126dfc40a92d4099060c1615a4fbd99edd12afea5e5163ec8ce8aba\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6105de61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c8063240034ec1461005b578063bf1924c5146100b0578063ef7c79491461014d578063f69c389b14610160575b600080fd5b61009661006936600461025b565b601881811b63ff00000016600883811c61ff00169084901b62ff0000169390921c60ff1692909217171790565b60405163ffffffff90911681526020015b60405180910390f35b6101356100be366004610294565b603881811b67ff0000000000000016602883811b66ff0000000000001691909117601884811b65ff00000000001691909117600885811b64ff00000000169190911763ff0000009186901c919091161762ff00009185901c919091161761ff009184901c919091161760ff9290911c919091161790565b6040516001600160401b0390911681526020016100a7565b61013561015b3660046102af565b610186565b61017361016e3660046102e2565b6101f0565b60405160039190910b81526020016100a7565b60008281808261019760018761032a565b6001600160401b031660016001600160401b0316901b166001600160401b0316119050600060018560026101cb9190610556565b6101d5919061032a565b905081156101e4578019831792505b50909150505b92915050565b600082818063ffffffff8316610207600187610576565b63ffffffff1660016001600160401b0316901b166001600160401b0316119050600060018560026102389190610593565b6101d59190610576565b803563ffffffff8116811461025657600080fd5b919050565b60006020828403121561026d57600080fd5b61027682610242565b9392505050565b80356001600160401b038116811461025657600080fd5b6000602082840312156102a657600080fd5b6102768261027d565b600080604083850312156102c257600080fd5b6102cb8361027d565b91506102d96020840161027d565b90509250929050565b600080604083850312156102f557600080fd5b82358060030b811461030657600080fd5b91506102d960208401610242565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b038381169083168181101561034a5761034a610314565b039392505050565b600181815b8085111561039257816001600160401b030482111561037857610378610314565b8085161561038557918102915b93841c9390800290610357565b509250929050565b600181815b80851115610392578163ffffffff048211156103bd576103bd610314565b808516156103ca57918102915b93841c939080029061039f565b6000826103e6575060016101ea565b816103f3575060006101ea565b8160018114610409576002811461041357610447565b60019150506101ea565b60ff84111561042457610424610314565b6001841b91506001600160401b0382111561044157610441610314565b506101ea565b5060208310610133831016604e8410600b8410161715610481575081810a6001600160401b0381111561047c5761047c610314565b6101ea565b61048b8383610352565b806001600160401b03048211156104a4576104a4610314565b029392505050565b6000826104bb575060016101ea565b816104c8575060006101ea565b816001811461040957600281036105045760ff8411156104ea576104ea610314565b6001841b915063ffffffff82111561044157610441610314565b5060208310610133831016604e8410600b8410161715610536575081810a63ffffffff81111561047c5761047c610314565b610540838361039a565b8063ffffffff048211156104a4576104a4610314565b60006001600160401b0361056e8185168285166103d7565b949350505050565b600063ffffffff8381169083168181101561034a5761034a610314565b600063ffffffff61056e8185168285166104ac56fea26469706673582212201dd62a52b437cd31fedc2bab85d06cf095ff66f81282e388ef34f24091bbdca464736f6c634300080f0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c8063240034ec1461005b578063bf1924c5146100b0578063ef7c79491461014d578063f69c389b14610160575b600080fd5b61009661006936600461025b565b601881811b63ff00000016600883811c61ff00169084901b62ff0000169390921c60ff1692909217171790565b60405163ffffffff90911681526020015b60405180910390f35b6101356100be366004610294565b603881811b67ff0000000000000016602883811b66ff0000000000001691909117601884811b65ff00000000001691909117600885811b64ff00000000169190911763ff0000009186901c919091161762ff00009185901c919091161761ff009184901c919091161760ff9290911c919091161790565b6040516001600160401b0390911681526020016100a7565b61013561015b3660046102af565b610186565b61017361016e3660046102e2565b6101f0565b60405160039190910b81526020016100a7565b60008281808261019760018761032a565b6001600160401b031660016001600160401b0316901b166001600160401b0316119050600060018560026101cb9190610556565b6101d5919061032a565b905081156101e4578019831792505b50909150505b92915050565b600082818063ffffffff8316610207600187610576565b63ffffffff1660016001600160401b0316901b166001600160401b0316119050600060018560026102389190610593565b6101d59190610576565b803563ffffffff8116811461025657600080fd5b919050565b60006020828403121561026d57600080fd5b61027682610242565b9392505050565b80356001600160401b038116811461025657600080fd5b6000602082840312156102a657600080fd5b6102768261027d565b600080604083850312156102c257600080fd5b6102cb8361027d565b91506102d96020840161027d565b90509250929050565b600080604083850312156102f557600080fd5b82358060030b811461030657600080fd5b91506102d960208401610242565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b038381169083168181101561034a5761034a610314565b039392505050565b600181815b8085111561039257816001600160401b030482111561037857610378610314565b8085161561038557918102915b93841c9390800290610357565b509250929050565b600181815b80851115610392578163ffffffff048211156103bd576103bd610314565b808516156103ca57918102915b93841c939080029061039f565b6000826103e6575060016101ea565b816103f3575060006101ea565b8160018114610409576002811461041357610447565b60019150506101ea565b60ff84111561042457610424610314565b6001841b91506001600160401b0382111561044157610441610314565b506101ea565b5060208310610133831016604e8410600b8410161715610481575081810a6001600160401b0381111561047c5761047c610314565b6101ea565b61048b8383610352565b806001600160401b03048211156104a4576104a4610314565b029392505050565b6000826104bb575060016101ea565b816104c8575060006101ea565b816001811461040957600281036105045760ff8411156104ea576104ea610314565b6001841b915063ffffffff82111561044157610441610314565b5060208310610133831016604e8410600b8410161715610536575081810a63ffffffff81111561047c5761047c610314565b610540838361039a565b8063ffffffff048211156104a4576104a4610314565b60006001600160401b0361056e8185168285166103d7565b949350505050565b600063ffffffff8381169083168181101561034a5761034a610314565b600063ffffffff61056e8185168285166104ac56fea26469706673582212201dd62a52b437cd31fedc2bab85d06cf095ff66f81282e388ef34f24091bbdca464736f6c634300080f0033",
  "devdoc": {
    "author": "Felipe Argento / Stephen Chen",
    "kind": "dev",
    "methods": {
      "int32SignExtension(int32,uint32)": {
        "params": {
          "number": "signed number to be extended",
          "wordSize": "number of bits of the signed number, ie, 8 for int8"
        }
      },
      "uint32SwapEndian(uint32)": {
        "params": {
          "num": "number to have bytes swapped"
        }
      },
      "uint64SignExtension(uint64,uint64)": {
        "params": {
          "number": "signed number to be extended",
          "wordSize": "number of bits of the signed number, ie, 8 for int8"
        }
      },
      "uint64SwapEndian(uint64)": {
        "params": {
          "num": "number to have bytes swapped"
        }
      }
    },
    "title": "Bits Manipulation Library",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "int32SignExtension(int32,uint32)": {
        "notice": "Sign extend a shorter signed value to the full int32"
      },
      "uint32SwapEndian(uint32)": {
        "notice": "Swap byte order of unsigned ints with 32 bytes"
      },
      "uint64SignExtension(uint64,uint64)": {
        "notice": "Sign extend a shorter signed value to the full uint64"
      },
      "uint64SwapEndian(uint64)": {
        "notice": "Swap byte order of unsigned ints with 64 bytes"
      }
    },
    "notice": "Implements bit manipulation helper functions",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}